1. Процессы жизненного цикла систем (на основе ISO/IEC 15288).
Предназначен для организаций, приобретающих, разрабатывающих или внедряющих системы. Созданные системы могут использоваться для внутренних целей или поставляться заказчикам. Состоит из групп процессов. Для каждого процесса определены цели и результаты: Соглашения: приобретения, поставки. Предприятия: управление средой предприятия, инвестициями, процессами ЖЦ системы, ресурсами, качеством. Проекта:  менеджмент проекта (планирования, управления и оценки проекта), поддержки проекта(менеджмент решений, рисков, конфигурации, информации; процесс измерений.) Технические: определения требований правообладателей, анализ требований, проектирования архитектуры, реализация элементов системы, комплексирование, верификации, передачи, валидации, функционирования, технического обслуживания, изъятия и списания. 


2. Структура и функциональное назначение процессов жизненного цикла программных средств (на основе ISO/IEC 12207).
Стандарт устанавливает структуру процессов жизненного цикла программных средств, на которую можно ориентироваться в программной индустрии. Стандарт определяет процессы, виды деятельности и задачи, которые используются при приобретении программного продукта или услуги, а также при поставке, разработке, применении по назначению, сопровождении и прекращении применения программных продуктов. Состоит из семи групп процессов [начало из 1 вопр.]: Соглашения, Организационного обеспечения проекта, Проекта, Технические. Реализации ПС: анализ требований, проектирования архитектуры, детального проектирования, конструирования, комплексирования, квалификационного тестирования ПС, Поддержки ПС: менеджмент документации, конфигурации, обеспечения гарантии качества, верификации, валидации, ревизии, аудита, решения проблем в ПС, Повторного использования ПС: проектирование доменов, менеджмент повторного применения активов и программ.


3. Модель качества и критерии качества программных средств (на основе ISO/IEC 9126 и ISO/IEC 25010).
Система факторов качества ПО по ISO 9126: Эффективность - решение задач пользователей в заданном контексте. Продуктивность - результаты в рамках ожидаемых затрат ресурсов. Безопасность - низкий уровень риска нанесения ущерба людям, бизнесу, собственности, окружающей среде. Удовлетворение пользователей при использовании в заданном контексте.  Модель качества продукта ISO 25010. Характеристики: Функциональное соответствие - степень обеспечения системой функций, потребностям в заданных условиях. Подхарактеристики (ПХ): функциональная полнота, правильность и пригодность. Эффективность функционирования - зависимость функционирования от количества ресурсов. ПХ: поведение во времени, использование ресурсов, емкость. Совместимость - степень возможностей системы обмениваться информацией с другими системами. ПХ: сосуществование, способность к взаимодействию. Практичность - степень применимости системы для достижения заданных целей. ПХ: распознаваемость пригодности, обучаемость, простота, защита от ошибок пользователей, эстетичность, доступность. Надежность - степень выполнения системой заданных функций в заданных условиях в течение заданного периода времени. ПХ: устойчивость к ошибке, восстанавливаемость. Защищенность - степень защиты системой данных так, чтобы люди, другие системы имели степень доступа к данным, соответствующую типам и уровням их авторизации. ПХ: конфиденциальность, идентифицируемость. Сопровождаемость - степень результативности модификаций системы запланированным персоналом сопровождения. ПОДХ: модульность, повторная используемость, тестируемость. Мобильность - степень эффективности переноса системы из одной среды в другую. ПХ: адаптируемость, простота установки.
4. Оценка зрелости процессов создания и сопровождения программных средств на основе методологии СММ и СММI (на основе ISO/IEC 15504).
Capability Maturity Model Integration (CMMI) - Комплексная модель производительности и зрелости - набор моделей (методологий) совершенствования процессов в организациях разных размеров и видов деятельности. Cодержит пять уровней зрелости: начальный (без плана, зависит от личных качеств), повторяемый (формальные процедуры. уровень проектов), определенный (стандарта предприятия), управляемый (собирают статистику качества), оптимизирующий (корпорация, повышение эффективности)


5. Система менеджмента информационной безопасности (на основе серии ISO/IEC 27000).
СМИБ содержит требования по реализации и совершенствованию систем управления защитой информации и основывается на модели PDCA (Plan-Do-Check-Act): создание - идентификация активов, менеджмент рисков; внедрение - этап реализации соответствующих мер по управлению безопасностью; проверка - мониторинг и анализ; действие - поддержание в рабочем состоянии и улучшение. Кроме разработки правил управления и обеспечения безопасности, не менее важно обеспечить цикличность всех процессов по управлению безопасностью, чтобы все процедуры последовательно проходили этапы модели PDCA. Именно это говорит о соответствии системы управления стандарту ISO 27001 и свидетельствует о готовности к сертификации СМИБ. Выполнение требований стандарта позволяет минимизировать риски потерь активов предприятия/организации и сократить финансовые потери.


6. Методы кодирования текстовой, графической и звуковой информации в ЭВМ. Аналоговые, дискретные и цифровые сигналы.
Современный компьютер может обрабатывать числовую, текстовую, графическую, звуковую и видео информацию. Все виды в двоичном коде, потому что удобно представлять информацию в виде последовательности электрических импульсов: нет (0), есть (1). Последовательность нулей и единиц называют машинным языком. Представление текстовой информации: Каждому символу соответствует двоичное число, образуя таблицу кодировок символов. Существует стандарты: ASCII, Unicode.. Например, в таблице ASCII одним байтом кодируются 256 символов. Согласно этой кодировке букве b соответствует код 01100010, о - 01101111, k - 01101011.  Кодирование графической информации:  Изображения делятся:
Растровую (пиксели с информацией о цвете): RGB - аддитивная цветовая модель (цвета получаются путём добавления к чёрному цвету. цвет до 8 бит. От 0 до 255). CMYK - субтрактивная (вычитания из белого света. цвет в %).Векторную (математические слои элементов): Без потери качества. SVG. Представление звуковой информации: Аналоговый сигнал x(t) является непрерывной функцией времени. Электрический аналоговый сигнал возникает при физическом сигнале (речь). Цифровой сигнал - аналоговый сигнал, представленный посредством дискретных численных значений его амплитуды. Оцифровка звука - аналогово-цифровое преобразование звука. Процесс оцифровки звука включает в себя: процесс дискретизации сигнала по времени (осуществление выборок) и квантования сигнала по амплитуде. Качество звука = глубина кодирования (дискретизация по уровню) * частота дискретизации 24000 раз в секунду. 16 * 24000 =  48Кбайт/с. Формат без сжатия WAV, без MP3. Воспринимается 6 Гц до 20 кГц., ультразвук до 1 ГГц, гиперзвук от 1 ГГц.


7. История создания, принципы работы и основные сервиеы сети Интернет.
История создания
Прародителем Интернет можно назвать организацию ARPA (Advanced Research Projects Agency) - Агентство передовых исследовательских проектов в области обороны при Министерстве обороны США
 В 1969 г. были объединены четыре узла этой сети: UCLA - Центр испытаний сети, Станфордский исследовательский институт, университет Санта-Барбары и университет Юта. Через год их стало уже пятнадцать, и они использовали для обмена пакетами протокол NCP - Network Control Protocol.
В 1975 году экспериментальную сеть объявили рабочей, причем ответственность за нее была возложена на DCA (Агентство Оборонной связи США). Одновременно, специалисты занялись разработкой основ TCP/IP (Transmission Control Protocol/Internet Protocol - Протоколы управления процессом передачи/Internet-протокол).
В 1983 году протоколы  TCP/IP были приняты в качестве Военных Стандартов США.
В 1985 г. на основе технологии ARPANET была создана сеть NSFNET (the National Science Foundation NETwork -Сеть Национального научного фонда), в создании которой приняли непосредственное участие NASA и Министерство энергетики. Было соединено шесть крупных научно-исследовательских центров, оснащенных новейшими суперкомпьютерами, расположенных в разных регионах США. Получившаяся сущность позволяет исследователям всех связанных институтов разделять информацию с коллегами по всей стране так же легко, как если бы они были в соседней комнате.
В мае 1993 года NSF радикальным образом изменил архитектуру Интернета. Опорная сеть NSFNET была практически закрыта, а архитектура NAP превратилась в Интернет.
Расцвет Интернета произошел с созданием World Wide Web (WWW) -всемирной паутины Интернет


Принципы работы:
 
Основные сервисы:
в настоящее время в Интернет существует достаточно большое количество сервисов, обеспечивающих работу со всем спектром ресурсов. Наиболее известными среди них являются:
* электронная почта (E-mail), обеспечивающая возможность обмена сообщениями одного человека с одним или несколькими абонентами;
* телеконференции, или группы новостей (Usenet), обеспечивающие возможность коллективного обмена сообщениями;
* сервис FTP - система файловых архивов, обеспечивающая хранение и пересылку файлов различных типов;
* сервис Telnet, предназначенный для управления удаленными компьютерами в терминальном режиме;
* World Wide Web (WWW, W3) - гипертекстовая (гипермедиа) система, предназначенная для интеграции различных сетевых ресурсов в единое информационное пространство;
* сервис DNS, или система доменных имен, обеспечивающий возможность использования для адресации узлов сети мнемонических имен вместо числовых адресов;
* сервис IRC, предназначенный для поддержки текстового общения в реальном времени (chat);








8. Представление данных в ЭВМ. Единицы измерения информации. Двоичные приставки по ГОСТ 8.417-2002 и IEC 80000-13.
Все виды информации в компьютере представлены в двоичном коде - символами 0 и 1 (низкий и высокий уровень сигнала), именуемых битами. Единицы измерения информации и приставки (в скобках, слева - ГОСТ, справа - IEC): 8 бит = 1 байт (Б, B); 1024 байт = 1 килобайт (кБ, KiB); 1024 кБ = 1 мегабайт (МБ, MiB); 1024 МБ =1 гигабайт (ГБ, GiB); Терабайт (ТБ, TiB); Петабайт (ПБ, PiB); Эксабайт (ЭБ, EiB); Зеттабайт (ЗБ, ZiB); Йоттабайт (ЙБ, YiB);


9. Принципы и архитектура фон Неймана.


1. Принцип однородности памяти (Команды и данные хранятся в одной и той же памяти и внешне в памяти неразличимы) 2. Принцип адресности (Структурно основная память состоит из пронумерованных ячеек, причем процессору в произвольный момент доступна любая ячейка. Двоичные коды команд и данных разделяются на единицы информации, называемые словами, и хранятся в ячейках памяти, а для доступа к ним используются номера соответствующих ячеек - адреса.) 3. Принцип программного управления 4. Принцип двоичного кодирования (вся информация, как данные, так и команды, кодируются двоичными цифрами 0 и 1)  






10. Порядок обработки команд микропроцессором. Прерывания. Типы прерываний.
В современных микропроцессорах используется Конвейерная организация работы - Выполнение каждой команды складывается из ряда последовательных этапов, суть которых не меняется от команды к команде. С целью увеличения быстродействия процессора и максимального использования всех его возможностей в современных микропроцессорах используется конвейерный принцип обработки информации. Этот принцип подразумевает, что в каждый момент времени процессор работает над различными стадиями выполнения нескольких команд, причем на выполнение каждой стадии выделяются отдельные аппаратные ресурсы. По очередному тактовому импульсу каждая команда в конвейере продвигается на следующую стадию обработки, выполненная команда покидает конвейер, а новая поступает в него.
В различных процессорах количество и суть этапов различаются.
Рассмотрим принципы конвейерной обработки информации на примере пятиступенчатого конвейера, в котором выполнение команды складывается из следующих этапов:
1.           IF ( INsTRuction Fetch ) - считывание команды в процессор;
2.           ID ( INsTRuction DecodINg ) - декодирование команды;
3.           OR ( Operand ReadINg ) - считывание операндов;
4.           EX ( ExecutINg ) - выполнение команды;
5.           WB ( Write Back ) - запись результата.	 
Прерывание - это изменение естественного порядка выполнения программы, которое связано с необходимостью реакции системы на работу внешних устройств, а также на ошибки и особые ситуации, возникшие при выполнении программы. При этом вызывается специальная программа -
обработчик прерываний, специфическая для каждой возникшей ситуации, после выполнения которой возобновляется работа прерванной программы.
В зависимости от источника возникновения сигнала, прерывания делятся на:
* асинхронные, или внешние (аппаратные) - события, которые исходят от внешних источников (например, периферийных устройств) и могут произойти в любой произвольный момент: сигнал от таймера, сетевой карты или дискового накопителя, нажатие клавиш клавиатуры, движение мыши. Факт возникновения в системе такого прерывания трактуется как запрос на прерывание (англ. Interrupt request, IRQ);
* синхронные, или внутренние - события в самом процессоре как результат нарушения каких-то условий при исполнении машинного кода: деление на ноль или переполнение стека, обращение к недопустимым адресам памяти или недопустимый код операции;
* программные (частный случай внутреннего прерывания) - инициируются исполнением специальной инструкции в коде программы. Программные прерывания, как правило, используются для обращения к функциям встроенного программного обеспечения (firmware), драйверов и операционной системы.
Механизм прерывания обеспечивается соответствующими аппаратно-программными средствами компьютера.

Запросы аппаратных прерываний возникают асинхронно по отношению к работе микропроцессора и связаны с работой внешних устройств.
Запрос от немаскируемых прерываний поступает на вход NMI микропроцессора и не может быть программно заблокирован. Обычно этот вход используется для запросов прерываний от схем контроля питания или неустранимых ошибок ввода/вывода.
Для запросов маскируемых прерываний используется вход INT микропроцессора. Обработка запроса прерывания по данному входу может быть заблокирована сбросом бита IF в регистре флагов микропроцессора.
Программные прерывания, строго говоря, называются исключениями или особыми случаями. Они связаны с особыми ситуациями, возникающими при выполнении программы (отсутствие страницы в оперативной памяти, нарушение защиты, переполнение), то есть с теми ситуациями, которые программист предвидеть не может, либо с наличием в программе специальной команды INT n, которая используется программистом для вызова функций операционной системы либо BIOS, поддерживающих работу с внешними устройствами. В дальнейшем при обсуждении работы системы прерываний мы будем употреблять единый термин "прерывание" для аппаратных прерываний и исключений, если это не оговорено особо.
Программные прерывания делятся на следующие типы.
Нарушение (отказ) - особый случай, который микропроцессор может обнаружить до возникновения фактической ошибки (например, отсутствие страницы в оперативной памяти); после обработки нарушения программа выполняется с рестарта команды, приведшей к нарушению.
Ловушка - особый случай, который обнаруживается после окончания выполнения команды (например, наличие в программе команды INT n или установленный флаг TF в регистре флагов ). После обработки этого прерывания выполнение программы продолжается со следующей команды.
Авария (выход из процесса) - столь серьезная ошибка, что некоторый контекст программы теряется и ее продолжение невозможно. Причину аварии установить нельзя, поэтому программа снимается с обработки. К авариям относятся аппаратные ошибки, а также несовместимые или недопустимые значения в системных таблицах.


11. Поколения ЭВМ, основные особенности.
I Поколение 50-60-е гг.
Аппаратная база - электронно-вакуумные лампы. В оперативных запоминающих устройствах использовались магнитные барабаны, акустические ультразвуковые ртутные и электромагнитные линии задержки, электронно-лучевые трубки (ЭЛТ). В качестве внешних запоминающих устройств применялись накопители на магнитных лентах, перфокартах, перфолентах и штекерные коммутаторы. Программирование работы ЭВМ этого поколения выполнялось в двоичной системе счисления на машинном языке, то есть программы были жестко ориентированы на конкретную модель машины и "умирали" вместе с этими моделями.
Представители: МЭСМ (СССР), IBM 701.
II Поколение 60-70-е гг.
Аппаратная база - полупроводниковые транзисторы.
Логические схемы строились на дискретных полупроводниковых и магнитных элементах (диоды, биполярные транзисторы, тороидальные ферритовые микротрансформаторы). В качестве конструктивно-технологической основы использовались схемы с печатным монтажом (платы из фольгированного гетинакса). Широко стал использоваться блочный принцип конструирования машин, который позволяет подключать к основным устройствам большое число разнообразных внешних устройств, что обеспечивает большую гибкость использования компьютеров. Тактовые частоты работы электронных схем повысились до сотен килогерц.
Стали применяться внешние накопители на жестких магнитных дисках и на флоппи-дисках - промежуточный уровень памяти между накопителями на магнитных лентах и оперативной памятью.
В 1964 году появился первый монитор для компьютеров - IBM 2250. Это был монохромный дисплей с экраном 12 х 12 дюймов и разрешением 1024 х 1024 пикселов. Он имел частоту кадровой развертки 40 Гц.
В машинах второго поколения были впервые реализованы режимы пакетной обработки и телеобработки информации.
Примеры: БЭСМ (СССР), IBM 360-40.
III Поколение 70-80-е гг.
Аппаратная база - БИС (большие интегральные схемы). В 1958 году Роберт Нойс изобрел малую кремниевую интегральную схему, в которой на небольшой площади можно было размещать десятки транзисторов. Эти схемы позже стали называться схемами с малой степенью интеграции (Small Scale Integrated circuits - SSI). А уже в конце 60-х годов интегральные схемы стали применяться в компьютерах.
Логические схемы ЭВМ 3-го поколения уже полностью строились на малых интегральных схемах. Тактовые частоты работы электронных схем повысились до единиц мегагерц. Снизились напряжения питания (единицы вольт) и потребляемая машиной мощность. Существенно повысились надежность и быстродействие ЭВМ.
В оперативных запоминающих устройствах использовались миниатюрнее ферритовые сердечники, ферритовые пластины и магнитные пленки с прямоугольной петлей гистерезиса. В качестве внешних запоминающих устройств широко стали использоваться дисковые накопители.
Появились еще два уровня запоминающих устройств: сверхоперативные запоминающие устройства на триггерных регистрах, имеющие огромное быстродействие, но небольшую емкость (десятки чисел), и быстродействующая кэш-память.
Начиная с момента широкого использования интегральных схем в компьютерах, технологический прогресс в вычислительных машинах можно наблюдать, используя широко известный закон Мура. Один из основателей компании Intel Гордон Мур в 1965 году открыл закон, согласно которому количество транзисторов в одной микросхеме удваивается через каждые 1,5 года. Ввиду существенного усложнения как аппаратной, так и логической структуры ЭВМ 3-го поколения часто стали называть системами.
В вычислительных машинах третьего поколения значительное внимание уделяется уменьшению трудоемкости программирования, эффективности исполнения программ в машинах и улучшению общения оператора с машиной. Это обеспечивается мощными операционными системами, развитой системой автоматизации программирования, эффективными системами прерывания программ, режимами работы с разделением машинного времени, режимами работы в реальном времени, мультипрограммными режимами работы и новыми интерактивными режимами общения. Появилось и эффективное видеотерминальное устройство общения оператора с машиной - видеомонитор, или дисплей.
Представители: Ряд IBM-360, VAX, ЕС-10*
IV Поколение 80-е (по наши дни?).
Аппаратная база - СБИС (Сверх большие интегральные схемы). Микропроцессоры. Персональные компьютеры. Оперативная память стала строиться не на ферритовых сердечниках, а также на интегральных CMOS-транзисторных схемах, причем непосредственно запоминающим элементом в них служила паразитная емкость между электродами (затвором и истоком) этих транзисторов.
Первый персональный компьютер создали в апреле 1976 года два друга, Стив Джобе (1955 г. р.) - сотрудник фирмы Atari, и Стефан Возняк (1950 г. р.), работавший на фирме Hewlett-Packard. На базе интегрального 8-битного контроллера жестко запаянной схемы популярной электронной игры, работая вечерами в автомобильном гараже, они сделали простенький программируемый на языке Бейсик игровой компьютер "Apple", имевший бешеный успех. В начале 1977 года была зарегистрирована Apple Сотр., и началось производство первого в мире персонального компьютера Apple.


12. Классификация запоминающих устройств в ЭВМ. Современные реализации запоминающих устройств.
По форме записанной информации:
* аналоговые; цифровые.
По устойчивости записи и возможности перезаписи:
* Постоянные (ПЗУ), содержание которых не может быть изменено конечным пользователем (например, BIOS). ПЗУ в рабочем режиме допускает только считывание информации.
* Записываемые (ППЗУ), в которые конечный пользователь может записать информацию только один раз (например, CD-R).
* Многократно перезаписываемые (ПППЗУ) (например, CD-RW).
* Оперативные (ОЗУ) - обеспечивают режим записи, хранения и считывания информации в процессе её обработки. Быстрые, но дорогие ОЗУ (SRAM) строят на триггерах, более медленные, но более дешёвые разновидности ОЗУ - динамические ЗУ (DRAM) строят на элементах состоящих из ёмкости (конденсатора) и полевого транзистора, используемого в качестве ключа разрешения записи-чтения. В обоих видах ЗУ информация исчезает после отключения от источника питания (например, тока).
По энергозависимости:
* энергонезависимые, записи в которых не стираются при снятии электропитания;
* энергозависимые, записи в которых стираются при снятии электропитания;
   * статические, которым для хранения информации достаточно сохранения питающего напряжения;
o        динамические, в которых информация со временем разрушается (деградирует), и, кроме подачи электропитания, необходимо производить её периодическое восстановление (регенерацию).
По типу доступа:
* С последовательным доступом (например, магнитные ленты).
* С произвольным доступом (RAM; например, оперативная память).
* С прямым доступом (например, жёсткие диски).
* С ассоциативным доступом (специальные устройства, для повышения производительности баз данных).
По геометрическому исполнению:
* дисковые (магнитные диски, оптические, магнитооптические);
* ленточные (магнитные ленты, перфоленты);
* барабанные (магнитные барабаны);
* карточные (магнитные карты, перфокарты, флэш-карты, и др.);
* печатные платы (карты DRAM, картриджи).
По физическому принципу:
* перфорационные (с отверстиями или вырезами)
   * перфокарта
   * перфолента
* с магнитной записью
   * магнитные сердечники (пластины, стержни, кольца, биаксы)
   * магнитные диски
      * Жёсткий магнитный диск
      * Гибкий магнитный диск
   * магнитные ленты
   * магнитные карты
* оптические
   * CD
   * DVD
   * HD-DVD
   * Blu-ray Disc
* магнитооптические:
   * CD-MO
* использующие накопление электростатического заряда в диэлектриках (конденсаторные ЗУ, запоминающие электроннолучевые трубки);
* использующие эффекты в полупроводниках (EEPROM, флэш-память)
* звуковые и ультразвуковые (линии задержки);
* использующие сверхпроводимость (криогенные элементы);
* другие.
По количеству устойчивых (распознаваемых) состояний одного элемента памяти:
* двоичные
* троичные
* десятичные
Современные ЗУ
* Магнитные ЗУ в пластиковых картах
* Флеш-память: USB-накопители, карты памяти в телефонах и фотоаппаратах, SSD
* Оптические диски: CD, DVD, Blu-Ray и др.
* Жёсткие диски (НЖМД)
Микросхемы SDRAM (DDR SDRAM и XDR)
 
Переносные накопители данных
Некоторые типы запоминающих устройств оформлены как компактные, носимые человеком устройства, приспособленные для переноса информации. В частности:
·         Съёмный жёсткий диск:
·         Mobile Rack
·         Контейнеры для жёстких дисков
·         ZIV
·         Флеш-память



13. Алгебра логики. Основные законы алгебры логики. Применение алгебры логики в информатике.
Алгебра логики (алгебра высказываний) - раздел математической логики, в котором изучаются логические операции над высказываниями. Чаще всего предполагается, что высказывания могут быть только истинными или ложными, то есть используется так называемая бинарная или двоичная логика.


Отрицание Если А истинно, то не А ложно, и наоборот
Логическое И (конъюнкция), истинно когда истинны оба исходных выражения,
Логическое ИЛИ (дизъюнкция) истинно тогда, когда истинно хотя бы одно из исходных выражений,
Операция исключающего ИЛИ полученное выражение истинно когда А и В не равны.
В импликации А называется посылкой, а В- следствием. Выражение ложно только когда посылка истинна, а следствие ложно. При ложной посылке состояние следствия может быть каким угодно.
В эквивалентности выражение истинно, если истинность обоих операндов совпадает.
В ЭВМ используются различные устройства, работу которых прекрасно описывает алгебра логики. К таким устройствам относятся группы переключателей, триггеры, сумматоры. Кроме того, связь между булевой алгеброй и компьютерами лежит и в используемой в ЭВМ системе счисления. Как известно она двоичная. Поэтому в устройствах компьютера можно хранить и преобразовывать как
числа, так и значения логических переменных.
 
 
14. Понятие алгоритма. Методы оценки алгоритмической сложности.
Алгоритм - набор иструкций, описывающих порядок действий исполнителя для достижения результата решения задачи за конечное число действий.
Для достаточно больших n значение экспоненциальной функции всегда превышает значение полиномиальной функции. Для малых n это не всегда справедливо, но всегда есть такое n, для которого значение экспоненциальной функции превышает аналогичное для полиномиальной.
Время, затраченное на реализацию алгоритма, как функция размерности задачи называется временной сложностью алгоритма и обозначается как O[fA(n)]. Применительно к решению задачи на ЭВМ это время является в большинстве случаев свойством самого алгоритма и слабо зависит от машины, на которой решается соответствующая алгоритму программа.
Кроме временной сложности алгоритмов существуют и другие меры сложности. Так, сложность можно характеризовать числом операций N (применительно к конкретной ЭВМ) и общим объемом информации Р, т.е. общим количеством слов, используемых при выполнении алгоритма.
Тогда время его выполнения на конкретной ЭВМ связано с числом операций, а объем информации связан с объемом памяти, необходимой машине для реализации соответствующей программы. Следовательно, время реализации алгоритма есть функция T=f(N). При таком подходе значения Т и Р называют соответственно вычислительной и емкостной сложностью алгоритма.
15. Понятие системы. Системный анализ. Применение системного анализа в информатике.
Под системой понимается любой объект, состоящий из множества взаимосвязанных частей и существующий как единое целое.
Системный анализ - научный метод познания, представляющий собой последовательность действий по установлению структурных связей между переменными или элементами исследуемой системы. Опирается на комплекс общенаучных, экспериментальных, естественнонаучных, статистических, математических методов.
Основным методическим принципом информационного моделирования является системный подход, согласно которому всякий объект моделирования рассматривается как система. Из всего множества элементов, свойств и связей выделяются лишь те, которые являются существенными для целей моделирования. В этом и заключается сущность системного анализа. Задача системного анализа, который проводит исследователь - упорядочить свои представления об изучаемом объекте, для того чтобы в дальнейшем отразить их в информационной модели.
Сама информационная модель представляет собой также некоторую систему параметров и отношений между ними. Эти параметры и отношения могут быть представлены в разной форме: графической, математической, табличной и др. Таким образом, просматривается следующий порядок этапов перехода от реального объекта к информационной модели:
 
 
 
1б. Теория формальных грамматик. Основные понятия и положении. Применение в информатике.
Теория формальных грамматик - раздел математической лингвистики, включающий способы описания формальных грамматик языков, построение методов и алгоритмов анализа принадлежности цепочек языку, а также алгоритмов перевода (трансляции) алгоритмических языков на язык машины.
Для задания описания формального языка необходимо, во-первых, указать алфавит, т. е. совокупность объектов, называемых символами (или буквами), каждый из которых можно воспроизводить в неограниченном количестве экземпляров (подобно обычным печатным буквам или цифрам), и, во-вторых, задать формальную грамматику языка, т. е. перечислить правила, по которым из символов строятся их последовательности, принадлежащие определяемому языку- правильные цепочки.
Правила формальной грамматики можно рассматривать как продукции (правила вывода), то есть элементарные операции, которые, будучи применены в определенной последовательности к исходной цепочке (аксиоме), порождают лишь правильные цепочки. Сама последовательность правил, использованных в процессе порождения некоторой цепочки, является ее выводом. Определенный таким образом язык представляет собой формальную систему.
Где применяется
Понятие алфавита формального языка широко применяется в лингвистике (в разделах, изучающих формальные грамматики), математической логике (прежде всего -теории моделей), теории автоматов, искусственном интеллекте (в том числе, в компьютерной лингвистике), информатике (в частности, в теории языков программирования). Отдельные теоретические проблемы построения слов и выражений формальных языков над алфавитами исследуются средствами общей алгебрыи комбинаторики.


17. Теория вероятностей. Основные понятия и положения. Применение в информатике.
Теория вероятностей - раздел математики, изучающийзакономерности случайных явлений: случайные события,cлучайные величины, их свойства и операции над ними. 
Одним из основных понятий теории вероятностей является понятие события. Под событием понимают любой факт, который может произойти в результате опыта или испытания. Под опытом, или испытанием, понимается осуществление определённого комплекса условий.
Достоверные события наступают всегда, когда создан определенный комплекс обстоятельств. Невозможные события определенно не наступают, если создался определенный комплекс условий. Случайные события при реализации определенного комплекса условий могут наступить и могут не наступить.
Классическое определение вероятности. Возможностью или благоприятным случаем называют случай, когда при реализации определённого комплекса обстоятельств события А  происходят. Классическое определение вероятности предполагает напрямую вычислить число благоприятных случаев или возможностей.
Вероятностью события А называют отношение числа благоприятных этому событию возможностей к числу всех равновозможных несовместимых событий N, которые могут произойти в результате одного испытания или наблюдения:
Достоверные события наступают всегда, когда создан определенный комплекс обстоятельств. Например, если работаем, то получаем за это вознаграждение, если сдали экзамены и выдержали конкурс, то достоверно можем рассчитывать на то, что включены в число студентов. Достоверные события можно наблюдать в физике и химии. В экономике достоверные события связаны с существующим общественным устройством и законодательством. Например, если мы вложили деньги в банк на депозит и выразили желание в определенный срок их получить, то деньги получим. На это можно рассчитывать как на достоверное событие.
Невозможные события определенно не наступают, если создался определенный комплекс условий. Например, вода не замерзает, если температура составляет плюс 15 градусов по Цельсию, производство не ведется без электроэнергии.
Случайные события при реализации определенного комплекса условий могут наступить и могут не наступить. Например, если мы один раз подбрасываем монету, герб может выпасть, а может не выпасть, по лотерейному билету можно выиграть, а можно не выиграть, произведенное изделие может быть годным, а может быть бракованным. Появление бракованного изделия является случайным событием, более редким, чем производство годных изделий.
Случайные события могут быть:
* несовместными;
* совместными.
 
События A, B, C ... называют несовместными, если в результате одного испытания может наступить одно из этих событий, но невозможно наступление двух или более событий.
Если наступление одного случайного события не исключает наступление другого события, то такие события называют совместными. Например, если с ленты конвейера снимают очередную деталь и событие А означает деталь соответствует стандарту, а событие B означает деталь не соответствует стандарту, то A и B - несовместные события. Если событие C означает взята деталь II сорта, то это событие совместно с событием A, но несовместно с событием B.
Если в каждом наблюдении (испытании) должно произойти одно и только одно из несовместных случайных событий, то эти события составляют полное множество (систему) событий.
Достоверным событием является наступление хотя бы одного события из полного множества событий.
Если события, образующие полное множество событий, попарно несовместны, то в результате наблюдения может наступить только одно из этих событий. Например, студент должен решить две задачи контрольной работы. Определенно произойдет одно и только одно из следующих событий:
* будет решена первая задача и не будет решена вторая задача;
* будет решена вторая задача и не будет решена первая задача;
* будут решены обе задачи;
* не будет решена ни одна из задач.
 
Эти события образуют полное множество несовместных событий.
Если полное множество событий состоит только из двух несовместных событий, то их называют взаимно противоположными или альтернативными событиями.
Событие, противоположное событию , обозначают . Например, в случае одного подбрасывания монеты может выпасть номинал () или герб ().
События называют равновозможными, если ни у одного из них нет объективных преимуществ. Такие события также составляют полное множество событий. Это значит, что в результате наблюдения или испытания определенно должно наступить по меньшей мере одно из равновозможных событий.
Например, полную группу событий образуют выпадение номинала и герба при одном подбрасывании монеты, наличие на одной печатной странице текста 0, 1, 2, 3 и более 3 ошибок.
 
 
 
 
18. Математические методы оптимизации и их применение в информатике.
Оптимизация - в математике, информатике и исследовании операций задача нахождения экстремума (минимума или максимума) целевой функции в некоторой области конечномерного векторного пространства, ограниченной набором линейных и/или нелинейных равенств и/или неравенств.
Теорию и методы решения задачи оптимизации изучает математическое программирование.
Математическое программирование - это область математики, разрабатывающая теорию, численные методы решения многомерных задач с ограничениями. В отличие от классической математики, математическое программирование занимается математическими методами решения задач нахождения наилучших вариантов из всех возможных.[1]
 
Методы оптимизации классифицируют в соответствии с задачами оптимизации:
·Локальные методы: сходятся к какому-нибудь локальному экстремуму целевой функции. В случае унимодальной целевой функции, этот экстремум единственен, и будет глобальным максимумом/минимумом.
·Глобальные методы: имеют дело с многоэкстремальными целевыми функциями. При глобальном поиске основной задачей является выявление тенденций глобального поведения целевой функции.
Существующие в настоящее время методы поиска можно разбить на три большие группы:
1.детерминированные;
2.случайные (стохастические);
3.комбинированные.
По критерию размерности допустимого множества, методы оптимизации делят на методы одномерной оптимизации и методы многомерной оптимизации.
По виду целевой функции и допустимого множества, задачи оптимизации и методы их решения можно разделить на следующие классы:
·                     Задачи оптимизации, в которых целевая функция и ограничения являются линейными функциями, разрешаются так называемыми методами линейного программирования.
·                     В противном случае имеют дело с задачей нелинейного программирования и применяют соответствующие методы.
·                     По требованиям к гладкости и наличию у целевой функции частных производных, их также можно разделить на:
·                     прямые методы, требующие только вычислений целевой функции в точках приближений;
·                     методы первого порядка: требуют вычисления первых частных производных функции;
·                     методы второго порядка: требуют вычисления вторых частных производных, то есть гессиана целевой функции.
Помимо того, оптимизационные методы делятся на следующие группы:
·                     аналитические методы (например, метод множителей Лагранжа и условия Каруша-Куна-Таккера);
·                     численные методы;
·                     графические методы.
В зависимости от природы множества X задачи математического программирования классифицируются как:
·                     задачи дискретного программирования (или комбинаторной оптимизации) - если X конечно или счётно;
·                     задачи целочисленного программирования - если X является подмножеством множества целых чисел;
·                     задачи нелинейного программирования, если ограничения или целевая функция содержат нелинейные функции и X является подмножеством конечномерноговекторного пространства.
·                     Если же все ограничения и целевая функция содержат лишь линейные функции, то это - задача линейного программирования.
Кроме того, разделами математического программирования являются параметрическое программирование, динамическое программирование и стохастическое программирование.
Математическое программирование используется при решении оптимизационных задач исследования операций.
Способ нахождения экстремума полностью определяется классом задачи. Но перед тем, как получить математическую модель, нужно выполнить 4 этапа моделирования:
·                     Определение границ системы оптимизации
·                                             Отбрасываем те связи объекта оптимизации с внешним миром, которые не могут сильно повлиять на результат оптимизации, а, точнее, те, без которых решение упрощается
·                     Выбор управляемых переменных
·                                             Замораживаем значения некоторых переменных (неуправляемые переменные). Другие оставляем принимать любые значения из области допустимых решений (управляемые переменные)
·                     Определение ограничений на управляемые переменные
·                                              (равенства и/или неравенства)
·                     Выбор числового критерия оптимизации (например, показателя эффективности)
·                                             Создаём целевую функцию


19. Понятие компьютерного моделирования. Вычислительный эксперимент.
Компьютерное моделирование является одним из эффективных методов изучения сложных систем. Компьютерные модели проще и удобнее исследовать в силу их возможности проводить т. н. вычислительные эксперименты, в тех случаях когда реальные эксперименты затруднены из-за финансовых или физических препятствий или могут дать непредсказуемый результат. Логичность и формализованность компьютерных моделей позволяет определить основные факторы, определяющие свойства изучаемого объекта-оригинала (или целого класса объектов), в частности, исследовать отклик моделируемой физической системы на изменения ее параметров и начальных условий.
Вычислительный эксперимент - разновидность компьютерного моделирования. Вычислительный эксперимент по модели - эксперимент, осуществляемый с помощью модели на ЭВМ с целью определения, прогноза тех или иных состояний системы, реакции на те или иные входные сигналы.
Вычислительный эксперимент позволяет заменить дорогостоящий натурный эксперимент расчетами на ЭВМ. Он позволяет в короткие сроки и без значительных материальных затрат осуществить исследование большого числа вариантов проектируемого объекта или процесса для различных режимов его эксплуатации, что значительно сокращает сроки разработки сложных систем и их внедрение в производство. Прибором эксперимента здесь является компьютер. Это процедура часто отождествляется с компьютерным моделированием.
Различают аналитическое и имитационное моделирование. При аналитическом моделировании изучаются математические (абстрактные) модели реального объекта в виде алгебраических, дифференциальных и других уравнений, а также предусматривающих осуществление однозначной вычислительной процедуры, приводящей к их точному решению. При имитационном моделировании исследуются математические модели в виде алгоритма(ов), воспроизводящего функционирование исследуемой системы путем последовательного выполнения большого количества элементарных операций.
 
 
20. Структурное программирование. Понятия и принципы.
Структурное программирование - методология разработки программного обеспечения, в основе которой лежит представление программы в виде иерархической структуры блоков. Предложена в 1970-х годах Э.Дейкстрой  и др.
В соответствии с данной методологией любая программа строится без использования оператора goto из трёх базовых управляющих структур: последовательность, ветвление, цикл; кроме того, используются подпрограммы При этом разработка программы ведётся пошагово, методом сверху вниз.  Сначала пишется текст основной программы, в которой вместо фрагментов, выделенных в подпрограммы, ставят заглушки. Это подпрограммы, в которых вместо реально нужных операторов ставят сигнальные печати или ввод данных, которые должна была бы сосчитать эта подпрограмма. Таким образом проверяют и отлаживают основной алгоритм. Затем подпрограммы-заглушки по очереди заменяют на нужные подпрограммы, отлаживают и тестируют их. Такая технология облегчает создание программы, уменьшает количество ошибок и облегчает нахождение допущенных ошибок.
Альтернативный способ - метод снизу-вверх: сначала пишут и отлаживают все подпрограммы, потом с их помощью строят, как из кубиков, основную программу.
Основные языки программирования, использующие структурную технологию:
- Ада, Си - языки общего назначения;
- Бейсик (до Visual Basic);
- КОБОЛ - для экономических задач (много операторов, облегчающих манипуляции с файлами);
- Фортран, Паскаль, ПЛ/1 - для вычислительных задач (удобные средства для записи формул)


Алгоритм задачи представляется только как композиция трёх базовых типов алгоритмов: линейных, ветвлений и циклов. Эти конструкции могут быть соединены или вложены друг в друга произвольным образом, но никаких других способов управления последовательностью выполнения операций не используется.
В алгоритме задачи выделяются модули. Модуль - это либо логически законченный фрагмент общей задачи, либо часто повторяющийся блок расчётов.
Каждый модуль оформляется по определённым правилам в виде подпрограммы, и в текст основного алгоритма вместо него вставляется короткая инструкция вызова подпрограммы. Когда выполнение программы доходит до этой инструкции, выполняется фрагмент, заложенный в подпрограмму, после чего управление передаётся на команду, следующую за инструкцией вызова подпрограммы.
Различают подпрограммы функции (используется как операнд в выражениях) и процедуры (используется как оператор). Общий вид подпрограммы:
Заголовок: Имя и Формальные параметры
Тело подпрограммы
Признак окончания подпрограммы
В инструкции по вызову указывается имя подпрограммы и фактические параметры, то есть значения формальных параметров, с которыми следует выполнить тело подпрограммы в данном месте.








21. Объектно-ориентированное программирование. Понятия и принципы.
Объектно-ориентированное программирование (ООП) - парадигма программирования, в которой основными концепциями являются понятия объектов и классов.
Основные понятия.
Абстракция 
Абстрагирование - это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция - это набор всех таких характеристик.
Инкапсуляция 
Инкапсуляция - это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе, и скрыть детали реализации от пользователя.
Наследование 
Наследование - это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс - потомком, наследником, дочерним или производным классом.
Полиморфизм 
Полиморфизм - это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта. При использовании термина полиморфизм в сообществе ООП подразумевается полиморфизм подтипов; а использование параметрического полиморфизма называют обобщённым программированием.
Класс 
Класс является описываемой на языке терминологии исходного кода моделью ещё не существующей сущности (объекта). Фактически он описывает устройство объекта, являясь своего рода чертежом. Говорят, что объект - это экземпляр класса. При этом в некоторых исполняющих системах класс также может представляться некоторым объектом при выполнении программы посредством динамической идентификации типа данных. Обычно классы разрабатывают таким образом, чтобы их объекты соответствовали объектам предметной области.
Объект 
Сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса или копирования прототипа (например, после запуска результатов компиляции и связывания исходного кода на выполнение).
Прототип 
Прототип - это объект-образец, по образу и подобию которого создаются другие объекты. Объекты-копии могут сохранять связь с родительским объектом, автоматически наследуя изменения в прототипе; эта особенность определяется в рамках конкретного языка.
Определение ООП и его основные концепции.
В центре ООП находится понятие объекта. Объект - это сущность, которой можно посылать сообщения и которая может на них реагировать, используя свои данные. Объект - это экземпляр класса. Данные объекта скрыты от остальной программы. Сокрытие данных называется инкапсуляцией.


Наличие инкапсуляции достаточно для объектности языка программирования, но ещё не означает его объектной ориентированности - для этого требуется наличие наследования.


Но даже наличие инкапсуляции и наследования не делает язык программирования в полной мере объектным с точки зрения ООП. Основные преимущества ООП проявляются только в том случае, когда в языке программирования реализован полиморфизм подтипов - возможность единообразно обрабатывать объекты с различной реализацией при условии наличия общего интерфейса.
Объектно-ориентированный подход заключается в следующем наборе основных принципов:
1. Всё является объектом.
2. Вычисления осуществляются путём взаимодействия (обмена данными) между объектами, при котором один объект требует, чтобы другой объект выполнил некоторое действие. Объекты взаимодействуют, посылая и получая сообщения. Сообщение - это запрос на выполнение действия, дополненный набором аргументов, которые могут понадобиться при выполнении действия.
3. Каждый объект имеет независимую память, которая состоит из других объектов.
4. Каждый объект является представителем класса, который выражает общие свойства объектов (таких, как целые числа или списки).
5. В классе задаётся поведение (функциональность) объекта. Тем самым все объекты, которые являются экземплярами одного класса, могут выполнять одни и те же действия.
6. Классы организованы в единую древовидную структуру с общим корнем, называемую иерархией наследования. Память и поведение, связанное с экземплярами определённого класса, автоматически доступны любому классу, расположенному ниже в иерархическом дереве.


Таким образом, программа представляет собой набор объектов, имеющих состояние и поведение. Объекты взаимодействуют посредством сообщений. Естественным образом выстраивается иерархия объектов: программа в целом - это объект, для выполнения своих функций она обращается к входящим в неё объектам, которые, в свою очередь, выполняют запрошенное путём обращения к другим объектам программы. Естественно, чтобы избежать бесконечной рекурсии в обращениях, на каком-то этапе объект трансформирует обращённое к нему сообщение в сообщения к стандартным системным объектам, предоставляемым языком и средой программирования.
Устойчивость и управляемость системы обеспечивается за счёт чёткого разделения ответственности объектов (за каждое действие отвечает определённый объект), однозначного определения интерфейсов межобъектного взаимодействия и полной изолированности внутренней структуры объекта от внешней среды (инкапсуляции).


22. Декларативные языки программирования и их сфера применения
Декларативные языки программирования.
К ним относятся функциональные и логические языки программирования. Функциональное программирование- это способ составления программ, в которых единственным действием является вызов функции. В функциональном программировании не используется память, как место для хранения данных, а, следовательно, не используются промежуточные переменные, операторы присваивания и циклы. Ключевым понятием в функциональных языках является выражение. Программа, написанная на функциональном языке, представляет собой последовательность описания функций и выражений. Выражение вычисляется сведением сложного к простому. Все выражения записываются в виде списков. Первым языком стал язык Лисп (LISP, LIST Processing- обработка списков) создан в 1959г. Этот язык позволяет обрабатывать большие объемы текстовой информации. Логическое программирование- это программирование в терминах логики. В 1973 году был создан язык искусственного интеллекта Пролог (PROLOG) (Programming in Logic). Программа на языке Пролог строится из последовательности фактов и правил, затем формулируется утверждение, которое Пролог пытается доказать с помощью правил. Язык сам ищет решение с помощью методов поиска и сопоставления, которые в нем заложены. Логические программы не отличаются высоким быстродействием, так как процесс их выполнения сводится к построению прямых и обратных цепочек рассуждений разнообразными методами поиска.
Язык Пролог используется в системах обработки естественных языков, исследованиях искусственного интеллекта, экспертных системах, онтологиях и других предметных областях, для которых естественно использование логической парадигмы.
Функциональное программирование



Программа состоит из совокупности функций, которые вызывают друг друга. Переменные могут отсутствовать вообще. Алгоритмы, записанные в функциональном виде как правило короче и содержат меньше ошибок чем аналогичные объектно-ориентированные или процедурные. Функциональное программирование считается программированием сверхвысокого уровня. Языки этой группы обладают относительно низким быстродействием из за сложности реализации.
Логическое программирование



Основывается на формальной логике и Булевой алгебре (в некоторых языках применяются средства нечёткой логики, что позволяет создавать системы искусственного интеллекта). Программа, записанная на логическом языке программирования, не содержит в себе конкретных алгоритмов (действий и команд типа сделать то, затем это). Задаётся описание условий задачи и логических отношений, по которым система программирования сама рассчитывает возможные следствия и взаимосвязи введённых данных и формул.


23. Событийно-ориентированное программирование.
Событийно-ориентированное программирование (англ. event-driven programming; в дальнейшем СОП) - парадигма программирования, в которой выполнение программы определяется событиями - действиями пользователя (клавиатура, мышь), сообщениями других программ и потоков, событиями операционной системы (например, поступлением сетевого пакета).
СОП можно также определить как способ построения компьютерной программы, при котором в коде (как правило, в головной функции программы) явным образом выделяется главный цикл приложения, тело которого состоит из двух частей: выборки события и обработки события.
Как правило, в реальных задачах оказывается недопустимым длительное выполнение обработчика события, поскольку при этом программа не может реагировать на другие события. В связи с этим при написании событийно-ориентированных программ часто применяют автоматное программирование.
Сфера применения.
Событийно-ориентированное программирование, как правило, применяется в трёх случаях:
1. при построении пользовательских интерфейсов (в том числе графических);
2. при создании серверных приложений в случае, если по тем или иным причинам нежелательно порождение обслуживающих процессов;
3. при программировании игр, в которых осуществляется управление множеством объектов.
Применение в серверных приложениях.
Событийно-ориентированное программирование применяется в серверных приложениях для решения проблемы масштабирования на 10000 одновременных соединений и более.
В серверах, построенных по модели один поток на соединение, проблемы с масштабируемостью возникают по следующим причинам:
1. слишком велики накладные расходы на структуры данных операционной системы, необходимые для описания одной задачи (сегмент состояния задачи, стек);
2. слишком велики накладные расходы на переключение контекстов.
Пример реализации: веб-сервера nginx и lighttpd.
Философской предпосылкой для отказа от потоковой модели серверов может служить высказывание Алана Кокса: Компьютер - это конечный автомат. Потоковое программирование нужно тем, кто не умеет программировать конечные автоматы.
Серверное приложение при событийно-ориентированном программировании реализуется на системном вызове, получающем события одновременно от многих дескрипторов (мультиплексирование). При обработке событий используются исключительно неблокирующие операции ввода-вывода, чтобы ни один дескриптор не препятствовал обработке событий от других дескрипторов.
Perl и событийно-ориентированное программирование.
Perl является языком программирования, который наиболее полным образом поддерживает принципы событийно-ориентированного программирования. Наиболее популярные perl-фреймворки для создания приложений в стиле СОП: POE и AnyEvent.
Применение в настольных приложениях.
В современных языках программирования события и обработчики событий являются центральным звеном реализации графического интерфейса пользователя. Рассмотрим, к примеру, взаимодействие программы с событиями от мыши. Нажатие правой клавиши мыши вызывает системное прерывание, запускающее определенную процедуру внутри операционной системы. В этой процедуре происходит поиск окна, находящегося под курсором мыши. Если окно найдено, то данное событие посылается в очередь обработки сообщений этого окна. Далее, в зависимости от типа окна, могут генерироваться дополнительные события. Например, если окно является кнопкой (в Windows все графические элементы являются окнами), то дополнительно генерируется событие нажатия на кнопку. Отличие последнего события в том, что оно более абстрактно, а именно, не содержит координат курсора, а говорит просто о том, что было произведено нажатие на данную кнопку.


Обработчик события может выглядеть следующим образом (на примере C#):
private void button1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Была нажата кнопка");
        }


Здесь обработчик события представляет собой процедуру, в которую передается параметр sender, как правило содержащий указатель на источник события. Это позволяет использовать одну и ту же процедуру для обработки событий от нескольких кнопок, различая их по этому параметру.


24. Многопоточное программирование. Процесс и поток выполнения. Средства синхронизации потоков.
Многопоточное параллельное программирование пытается воспользоваться возможностями более простой организации взаимодействия между процессами, протекающими с использованием общей памяти и разделяемых переменных. 
Интуитивно, потоки - это в некотором смысле последовательность самостоятельных действий (обращений к тем или иным устройствам, независимым вычислениям и др.), взаимодействующих при выполнении программы или, точнее, в рамках процесса ОС, однозначно связанного с выполнением программы. Потоки - это более простые (почему их иногда называют легковесными) процессы по сравнению с понятием процесса, которым оперируют ОС. 
Многопоточное параллельное программирование появилось как реакция на необходимость эффективного использования многопроцессорных вычислительных систем с общей памятью.
В параллельном программировании проектирование программ должно ориентироваться не на выполнение одной задачи в некоторый промежуток времени, а на одновременное выполнение нескольких задач, на которые предварительно должна быть разбита программа. Главная цель - усовершенствовать программное обеспечение, воспользовавшись принципом параллельности.
Средства параллельного программирования позволяют распределить работу программы между двумя (или больше) процессорами в рамках одного физического или одного виртуального компьютера. Такую программу можно разбить на процессы (process) или потоки (thread).
Параллельность в программе достигается путем разбиения программы на несколько процессов или потоков. Несмотря на существование различных вариантов организации логики программы (например, с помощью объектов или функций), под параллелизмом все же понимается использование множества процессов и потоков.
 Процесс (process) - это некоторая часть (единица) работы, создаваемая операционной системой. Программа может состоять из нескольких процессов. Процесс задается адресным пространством и идентификатором(id процесса). Процесс состоит из множества выполняющихся инструкций, размещенных в адресном пространстве этого процесса. Адресное пространство процесса распределяется между инструкциями, данными, принадлежащими процессу, и стеками, обеспечивающими вызовы функций и хранение локальных переменных.
Адресное пространство процесса делится на три логических раздела: текстовый (для кода программы), информационный (для данных программы) и стековый (для стеков программы). Текстовый раздел содержит подлежащие выполнению инструкции, которые называются программным кодом. Раздел данных содержит инициализированные глобальные, внешние и статические переменные процесса. Раздел стеков содержит локально создаваемые переменные и параметры, передаваемые функциям.
Потоки позволяют одной программе состоять из параллельно выполняемых частей, причем все части имеют доступ к одним и тем же переменным. Потоки можно рассматривать как облегченные процессы, т.е. они позволяют воспользоваться многими преимуществами процессов без больших затрат на организацию взаимодействия между ними.
Под потоком подразумевается часть выполняемого кода в процессе. Затраты вычислительных ресурсов, связанные с созданием потока, его поддержкой и управлением, в операционной системе значительно ниже по сравнению с аналогичными затратами для процессов, поскольку объем информации отдельного потока меньше, чем у процесса. Каждый поток, имея собственную последовательность инструкций, выполняется независимо от других, а все они - параллельно друг другу. Процесс с несколькими потоками, называется многопоточным.
Ресурсы, открытые родительским процессом, немедленно становятся доступными всем потокам. При этом никакой дополнительной инициализации или подготовки не требуется. Потоки независимы от родителя (создателя) и конкурируют за использование процессора. Создатель процесса или потока управляет своим потомком, т.е. он может отменить, приостановить или возобновить его выполнение либо изменить его приоритет. 
Основное различие между потоками и процессами состоит в том, что каждый процесс имеет собственное адресное пространство, а потоки - нет. Если процесс создает множество потоков, то все они будут содержаться в его адресном пространстве. Вот почему они так легко разделяют общие ресурсы, и так просто обеспечивается взаимодействие между ними.
Синхронизация потоков.
При выполнении нескольких потоков они будут неизменно взаимодействовать друг с другом, чтобы синхронизироваться. Существует несколько средств синхронизации потоков. Это:
* блоки взаимного исключения (Mutex);
* переменные состояния;
* семафоры (объекты, ограничивающие количество потоков, которые могут войти в заданный участок кода).
Объекты синхронизации являются переменными, к ним можно обратиться, как к данным. Потоки в различных процессах могут связаться друг с другом через объекты синхронизации, помещенные в разделяемую память потоков, даже в случае, когда потоки в различных процессах вообще невидимы друг для друга.
Объекты синхронизации можно разместить в файлах, где они будут находиться независимо от создавшего их процесса.
Основные ситуации, которые требуют использования синхронизации:
* Если синхронизация - это единственный способ гарантировать последовательность разделяемых данных.
* Если потоки в двух или более процессах могут использовать единственный объект синхронизации совместно. При этом объект синхронизации должен инициализироваться только одним из взаимодействующих процессов, потому что повторная инициализация объекта синхронизации переводит его в открытое состояние.
* Если синхронизация может гарантировать достоверность изменяющихся данных.
* Если процесс может отобразить файл и существует поток в этом процессе, который получает уникальный доступ к записям. Как только установлена блокировка, любой другой поток в любом процессе, отображающем файл, который пытается установить блокировку, блокируется, пока запись не будет освобождена.
25. Основные алгоритмы и структуры данных, применяемые в вычислительных системах.


Алгоритм - это описание последовательности действий, строгое выполнение которых приводит к решению поставленной задачи за конечное число шагов.


Удобное описание алгоритмов - блок-схема.


Свойства алгоритмов:
Дискретность - алгоритм должен состоять из шагов, следующих в определенном порядке.
Детерминированность - любое действие алгоритма должно быть точно определено и не должно быть двусмысленным. 
Конечность  - каждая ветвь алгоритма должна иметь завершение.
Массовость - один алгоритм может принимать различные исходные данные.
Результативность - отсутствие ошибок, при всех допустимых входных значениях.(В любом случае должен быть получен результат)


Типы алгоритмов:
Линейный - действия выполняются однократно, одно за другим.
Разветвляющий - алгоритм содержит минимум одно условие, в зависимости от которого выполняется его ветвление.
Циклический - действия повторяются многократно, пока условие цикла удовлетворяет истинности.


Эффективность алгоритма.
Временная сложность алгоритма представляет собой функцию времени T(n), от размера входных данных n, которая определяет максимальное количество элементарных операций, которые были проделаны алгоритмом для решения поставленной задачи.


Вид функции:  T(n) = 2n2 + 3n3


Единицы измерения для функции не определены, поэтому под функцией  T(n) понимают количество инструкций, выполняемых на идеализированном компьютере.


Асимптотическая сложность определяет порядок времени роста отдельного взятого алгоритма.
Для описания порядка порядка времени роста используется О-нотация - математическая запись, которая позволяет учитывать только наиболее весомые элементы функции времени.


Определение. Говорят, что функция времени Т(n) имеет порядок роста О(f(n)), если существуют константы с и n0, такие что для всех n >= n0 выполняется неравенство T(n)<=cf(n).
f(n)-верхняя граница скорости роста алгоритма.


Структура данных - программная единица, которая позволяет хранить и обрабатывать множество логически связанных данных.
Данные хранятся в виде битов. Структура данных формируется при помощи типов данных, ссылок и операций над ними.
К структурам данных относиться: 
* Массив - это структура данных с фиксированным и упорядоченным набором однотипных элементов (компонентов). Доступ к какому-либо из элементов массива осуществляется по имени и номеру (индексу) этого элемента. Количество индексов определяет размерность массива.
* Список - абстрактный тип данных, реализующий упорядоченный набор значений. Списки отличаются от массивов тем, что доступ к их элементам осуществляется последовательно и нет фиксированного размера.
* Множество - неупорядоченный набор элементов, без повторов. В множестве можно быстро проверить, есть какой-либо элемент внутри, или его нет.
* Стек. Стек характерен тем, что получить доступ к его элементом можно лишь с одного конца, называемого вершиной стека, иначе говоря: стек - структура данных, функционирующая по принципу LIFO (last in - first out, последним пришёл - первым вышел).
* Очередь. Структура данных Очередь использует принцип организации FIFO (First In, First Out - первым пришёл - первым вышел).
* Граф




26. Приёмы (шаблоны) объектно-ориентированного программирования.


ООП основано на трех принципах: инкапсуляция, наследование, полиморфизм.
Инкапсуляция
Инкапсуляция есть объединение в единое целое данных и алгоритмов обработки этих данных. В рамках ООП данные называются полями объекта, а алгоритмы - объектными методами.
Инкапсуляция позволяет в максимальной степени изолировать объект от внешнего окружения. Она существенно повышает надежность разрабатываемых программ, т.к. локализованные в объекте алгоритмы обмениваются с программой сравнительно небольшими объемами данных, причем количество и тип этих данных обычно тщательно контролируются. В результате замена или модификация алгоритмов и данных, инкапсулированных в объект, не влечет за собой плохо прослеживаемых последствий для программы в целом (в целях повышения защищенности программ в ООП почти не используются глобальные переменные).
Другим следствием инкапсуляции является легкость обмена объектами, переноса их из одной программы в другую.
Наследование
Наследование есть свойство объектов порождать своих потомков. Объект-потомок автоматически наследует от родителя все поля и методы, может дополнять объекты новыми полями и заменять (перекрывать) методы родителя или дополнять их.
Принцип наследования решает проблему модификации свойств объекта и придает ООП в целом исключительную гибкость. При работе с объектами программист обычно подбирает объект, наиболее близкий по своим свойствам для решения конкретной задачи, и создает одного или нескольких потомков от него, которые умеют делать то, что не реализовано в родителе.
Последовательное проведение в жизнь принципа наследуй и изменяй хорошо согласуется с поэтапным подходом к разработке крупных программных проектов и во многом стимулирует такой подход.
Полиморфизм
Полиморфизм - это свойство родственных объектов (т.е. объектов, имеющих одного общего родителя) решать схожие по смыслу проблемы разными способами. В рамках ООП поведенческие свойства объекта определяются набором входящих в него методов. Изменяя алгоритм того или иного метода в потомках объекта, программист может придавать этим потомкам отсутствующие у родителя специфические свойства. Для изменения метода необходимо перекрыть его в потомке, т.е. объявить в потомке одноименный метод и реализовать в нем нужные действия. В результате в объекте-родителе и объекте-потомке будут действовать два одноименных метода, имеющие разную алгоритмическую основу и, следовательно, придающие объектам разные свойства. Это и называется полиморфизмом объектов.
Объект в программировании - некоторая сущность в виртуальном пространстве, обладающая определённым состоянием и поведением, имеющая заданные значения свойств (атрибутов) и операций над ними (методов). При рассмотрении объектов выделяется то, что объекты принадлежат одному или нескольким классам, которые определяют поведение (являются моделью) объекта. Термины экземпляр класса и объект взаимозаменяемы.
 Класс представляет собой описание структуры объектов одного вида с набором методов их обработки. Аналогия с типом данных здесь напрашивается сама собой. Тип данных - это форма представления данных с набором операций. Отличие состоит в том, что тип данных либо уже определен в языке, либо формально составляется из уже существующих (но без внутреннего программирования). Значит, класс можно определить как тип данных, определяемый программистом. Тогда объект - это переменная класса. Эта трактовка закреплена в языке: синтаксис определения переменных и объектов почти полностью идентичен.


Гибкая методология разработки (Agile software development) - серия подходов к разработке программного обеспечения, ориентированных на использование итеративной разработки и динамическое формирование требований и обеспечение их реализации в результате постоянного взаимодействия внутри самоорганизующихся рабочих групп, состоящих из специалистов различного профиля. К классу гибких методологий разработки относятся: экстремальное программирование, DSDM, Scrum. 
Большинство гибких методологий нацелены на минимизацию рисков путём сведения разработки к серии коротких циклов (итераций), которые обычно длятся две-три недели. Каждая итерация сама по себе выглядит как программный проект в миниатюре и включает все задачи, необходимые для выдачи мини-прироста по функциональности: планирование, анализ требований, проектирование, кодирование, тестирование и документирование. Хотя отдельная итерация недостаточна для выпуска новой версии продукта, подразумевается, что гибкий программный проект готов к выпуску в конце каждой итерации. По окончании каждой итерации команда выполняет переоценку приоритетов разработки. 
Agile-методы делают упор на непосредственное общение лицом к лицу. Большинство agile-команд расположены в одном офисе, иногда называемом bullpen. Как минимум, она включает и заказчиков, определяющих требования к продукту; эту роль может выполнять менеджер проекта, бизнес-аналитик или клиент. Офис может включать тестировщиков, дизайнеров интерфейса, технических писателей и менеджеров. 
Основной метрикой agile-методов является рабочий продукт. Благодаря непосредственному общению, agile-методы уменьшают объём письменной документации. Это привело к критике этих методов как недисциплинированных.


27. Теория графов. Основные понятия. Решаемые задачи.


Теория графов - раздел дискретной математики, изучающий свойства графов. В общем смысле граф представляется как множество вершин (узлов), соединённых рёбрами. В строгом определении графом называется такая пара множеств. G = (V, E), где V есть подмножество любого счётного множества, а E - подмножество V x V.
Теория графов находит применение в геоинформационных системах (ГИС). Существующие или вновь проектируемые дома, сооружения, кварталы рассматриваются как вершины, а соединяющие их дороги, инженерные сети, линии электропередачи как рёбра. Применение различных вычислений, производимых на таком графе, позволяет, например, найти кратчайший объездной путь или ближайший продуктовый магазин, спланировать оптимальный маршрут.
Теория графов содержит большое количество нерешённых проблем и пока не доказанных гипотез.
Основные понятия теории графов
Граф - система, которая интуитивно может быть рассмотрена как множество кружков и множество соединяющих их линий.
Кружки называются вершинами графа, линии со стрелками - дугами, без стрелок - ребрами. Граф, в котором направление линий не выделяется (все линии являются ребрами), называется неориентированным; граф, в котором направление линий принципиально (линии являются дугами) называется ориентированным.
Опр. 1. Задано конечное множество X, состоящее из n элементов (X = {1, 2,..., n}), называемых вершинами графа, и подмножество V декартова произведения X x X, то есть , называемое множеством дуг, тогда ориентированным графом G называется совокупность (X, V).
Опр. 2. Неориентированным графом называется совокупность множества X и множества неупорядоченных пар элементов, каждый из которых принадлежит множеству X.
Дугу между вершинами i и j, , будем обозначать (i, j). Число дуг графа будем обозначать m (V = ()).
Опр. 3. Подграфом называется часть графа, образованная подмножеством вершин вместе со всеми ребрами (дугами), соединяющими вершины из этого множества. Если из графа удалить часть ребер (дуг), то получим частичный граф.
Опр. 4. Две вершины называются смежными, если они соединены ребром (дугой). Смежные вершины называются граничными вершинами соответствующего ребра (дуги), а это ребро (дуга) - инцидентным соответствующим вершинам.
Опр.5. Путем называется последовательность дуг (в ориентированном графе), такая, что конец одной дуги является началом другой дуги.
Опр. 5.1. Простой путь - путь, в котором ни одна дуга не встречается дважды.
Опр. 5.2. Элементарный путь - путь, в котором ни одна вершина не встречается дважды.
Опр. 5.3. Контур - путь, у которого конечная вершина совпадает с начальной вершиной.
Опр. 5.4 Длиной пути (контура) называется число дуг пути (или сумма длин его дуг, если последние заданы).
Опр.6. Граф, для которого из (i, j) V следует (j, i) V называется симметрическим.
Опр. 7. Если из (i, j) V следует, что (j, i) V, то соответствующий граф называется антисимметрическим.
Опр. 8.1. Цепью называется множество ребер (в неориентированном графе), которые можно расположить так, что конец (в этом расположении) одного ребра является началом другого.
Опр. 8.2. Цепь - последовательность смежных вершин.
Опр. 9. Замкнутая цепь называется циклом.
Опр. 10.1. Элементарная цепь (цикл, путь, контур), проходящая через все вершины графа называется гамильтоновой цепью (соответственно - циклом, путем, контуром).
Опр. 10.2. Простая цепь (цикл, путь, контур), содержащая все ребра (дуги) графа называется эйлеровой цепью (соответственно - циклом, путем, контуром).
Опр. 11. Если любые две вершины графа можно соединить цепью, то граф называется связным. Если граф не является связным, то его можно разбить на связные подграфы, называемые компонентами.
Опр. 12. Связностью графа называется минимальное число ребер, после удаления которых граф становится несвязным. Для ориентированных графов, если любые две вершины графа можно соединить путем, то граф называется сильно связным. Связный граф, в котором существует эйлеров цикл, называется эйлеровым графом.
Опр. 13. В неориентированном графе степенью вершины i называется число инцидентных ей ребер. Очевидно,. Граф, степени всех вершин которого равны n - 1, называется полным. Граф, все степени вершин которого равны, называется однородным.
Опр. 14. Вершина, для которой не существует инцидентных ей ребер (= 0) называется изолированной. Вершина, для которой существует только одно инцидентное ей ребро ( = 1) называется висячей.
Опр. 15. Определим матрицу смежности графа как квадратную матрицу n x n, элемент которой равен единице, если (i, j) V, и нулю, если (i, j) V, i, jX. Для неориентированного графа матрица смежности всегда симметрическая.
Опр. 16. Определим матрицу инциденций для ребер графа как прямоугольную матрицу n x m, элемент которой равен единице, если вершина i инцидентна ребру j, и нулю в противном случае, i = 1, n, j = 1, m.
Опр. 17. Матрица инциденций для дуг графа - прямоугольная матрицу m x n, элемент rij которой равен плюс единице, если дуга исходит из вершины i, минус единице, если дуга заходит в вершину i, и нулю в остальных случаях, i = 1, n, j = 1, m
Опр. 18. Деревом называется связный граф без простых циклов, имеющий не менее двух вершин. Для дерева m = n - 1, а число висячих вершин равно Легко показать, что в дереве любые две вершины связаны единственной цепью.
Опр. 19. Прадеревом называется ориентированное дерево, у которого одна из вершин, называемая корнем, не имеет заходящих дуг, а степени захода остальных вершин равны единице.
Опр. 20. Плоским (планарным) называется граф, который можно изобразить на плоскости так, что различным вершинам соответствуют различные кружки и никакие два ребра не имеют общих точек, отличных от их границ (не пересекаются). Для плоского графа существует понятие грани - части плоскости, ограниченной ребрами и не содержащей внутри себя ни вершин, ни ребер.
Опр. 21. Степенью грани называется число ее граничных ребер (висячие ребра считаются дважды).
Любому связному плоскому графу G можно поставить в соответствие двойственный ему связный плоский граф G*, определяемый следующим образом: каждой грани графа G соответствует вершина графа G*, каждому ребру V графа G, являющемуся граничным для граней z1 и z2, соответствует ребро V* графа G*, соединяющее соответствующие граням z1 и z2 вершины.
Применение теории графов: В химии (для описания структур, путей сложных реакций); компьютерной химии. В информатике и программировании (граф-схема алгоритма). В коммуникационных и транспортных системах. Для маршрутизации данных в Интернете. В экономике. В логистике. В схемотехнике (топология межсоединений элементов на печатной плате или микросхеме представляет собой граф или гиперграф).


28. Средства моделирования при разработке программного обеспечения.


UML (Unified Modeling Language - унифицированный язык моделирования) - язык графического описания для объектного моделирования в области разработки программного обеспечения. UML является языком широкого профиля, это открытый стандарт, использующий графические обозначения для создания абстрактной модели системы, называемой UML-моделью. UML создан для определения, визуализации, проектирования и документирования, в основном, программных систем. UML не является языком программирования, но на основании UML-моделей возможна генерация кода.
Использование UML не ограничивается моделированием программного обеспечения. Его также используют для моделирования бизнес-процессов, системного проектирования и отображения организационных структур.
UML позволяет также разработчикам программного обеспечения достигнуть соглашения в графических обозначениях для представления общих понятий (таких как класс, компонент, обобщение (generalization), агрегация и поведение) и сконцентрироваться на проектировании и архитектуре.
Преимущества UML
* UML объектно-ориентирован, в результате чего методы описания результатов анализа и проектирования семантически близки к методам программирования на объектно-ориентированных языках;
* UML позволяет описать систему практически со всех возможных точек зрения и разные аспекты поведения системы;
* Диаграммы UML сравнительно просты для чтения после достаточно быстрого ознакомления с его синтаксисом;
* UML расширяет и позволяет вводить собственные текстовые и графические стереотипы, что способствует его применению не только в сфере программной инженерии;
Недостатки UML
* Избыточность языка. UML - неоправданно большой и сложный. Он включает много избыточных или неиспользуемых диаграмм и конструкций. Особенно UML 2.0, чем UML 1.0, так как новые ревизии включают больше разработанных комитетом компромиссов.
* Неточная семантика. Так как UML определён комбинацией себя (абстрактный синтаксис), OCL (языком описания ограничений - формальной проверки правильности) и английского (подробная семантика), то он лишен скованности, присущей языкам, точно определённым техниками формального описания. Иногда абстрактный синтаксис UML, OCL и английский противоречат друг другу, в других случаях они неполные. Неточность описания самого UML одинаково отражается на пользователях и поставщиках инструментов, приводя к несовместимости инструментов из-за уникального трактования спецификаций.
* Проблемы при изучении и внедрении. Эти проблемы делают проблематичным изучение и внедрение UML, особенно когда руководство насильно заставляет использовать UML инженеров при отсутствии у них предварительных навыков.
* Только код отражает код. Ещё одно мнение - что важны рабочие системы, а не красивые модели. Код и есть проект. UML ценится при подходах, которые компилируют модели для генерирования исходного или выполнимого кода. Этого может быть недостаточно, т.к. UML не имеет свойств полноты по Тьюрингу и любой сгенерированный код будет ограничен тем, что может разглядеть или предположить интерпретирующий UML инструмент.
* Кумулятивная нагрузка/Рассогласование нагрузки. Рассогласование нагрузки - термин из теории системного анализа для обозначения неспособности входа одной системы воспринять выход другой. UML может представить одни системы более кратко и эффективно, чем другие. Т.е. разработчик склоняется к решениям, которые более комфортно подходят к переплетению сильных сторон UML и языков программирования. Проблема становится очевидной, если язык разработки не придерживается принципов ортодоксальной объектно-ориентированной доктрины (не старается соответствовать традиционным принципам ООП).
* Пытается быть всем для всех. UML - это язык моделирования общего назначения, который пытается достигнуть совместимости со всеми возможными языками разработки. В контексте конкретного проекта, для достижения командой проектировщиков определённой цели, должны быть выбраны применимые возможности UML. Кроме того, пути ограничения области применения UML в конкретной области проходят через формализм, который не полностью сформулирован, и который сам является объектом критики.
CASE-технологии.
CASE (Computer-Aided Software Engineering) - набор инструментов и методов программной инженерии для проектирования программного обеспечения, который помогает обеспечить высокое качество программ, отсутствие ошибок, простоту в обслуживании программных продуктов. Также под CASE понимают совокупность методов и средств проектирования информационных систем с использованием CASE-инструментов.
Целью CASE-технологии является разграничение процесса проектирования программных продуктов от процесса кодирования и последующих этапов разработки, максимально автоматизировать процесс разработки. Для выполнения цели CASE-технологии используют два подхода к проектированию: структурный и объектно-ориентированный.
Структурный подход предполагает декомпозицию (разделение) поставленной задачи на функции, которые необходимо автоматизировать. Функции разбиваются на подфункции, задачи, процедуры. В результате получается упорядоченная иерархия функций и передаваемой информацией между функциями.
Структурный подход подразумевает использование определенных методологий при моделировании различных информационных систем: SADT (Structured Analysis and Design Technique); DFD (Data Flow Diagrams); ERD (Entity-Relationship Diagrams).
Существует три типа моделей, используемых при структурном подходе: функциональные, информационные и структурные. Основной инструмент объектно-ориентированного подхода - язык UML.
CASE-средства.
Средства автоматизации разработки программ (CASE-средства) - инструменты автоматизации процессов проектирования и разработки программного обеспечения для системного аналитика, разработчика ПО и программиста. Первоначально под CASE-средствами понимались только инструменты для упрощения трудоёмких процессов анализа и проектирования, но с приходом стандарта ISO/IEC 14102 CASE-средства стали определять как программные средства для поддержки процессов жизненного цикла ПО.
В функции CASE входят средства анализа, проектирования и программирования программных средств, проектирования интерфейсов, документирования и производства структурированного кода на каком-либо языке программирования.
CASE-инструменты классифицируются по типам и категориям.
Классификация по типам отражает функциональную ориентацию средств на те или иные процессы жизненного цикла разработки программного обеспечения, и совпадает с компонентным составом крупных интегрированных CASE-систем, и включает следующие типы: средства анализа предназначены для построения и анализа модели предметной области; средства проектирования баз данных; средства разработки приложений; средства реинжиниринга процессов; средства планирования и управления проектом; средства тестирования; средства документирования.
Классификация по категориям определяет степень интегрированности по выполняемым функциям и включают - отдельные локальные средства, решающие небольшие автономные задачи, набор частично интегрированных средств, охватывающих большинство этапов жизненного цикла и полностью интегрированных средств, охватывающий весь жизненный цикл информационной системы и связанных общим репозиторием.
Типичными CASE-инструментами являются: инструменты управления конфигурацией; инструменты моделирования данных; инструменты анализа и проектирования; инструменты преобразования моделей; инструменты редактирования программного кода; инструменты рефакторинга кода; генераторы кода; инструменты для построения UML-диаграмм.


29. Инструментальные средства разработки программного обеспечения.
Инструментальное программное обеспечение - программное обеспечение, предназначенное для использования в ходе проектирования, разработки и сопровождения программ, в отличие от прикладного и системного программного обеспечения.
Системы программирования - программы для разработки программного обеспечения:
* ассемблеры - компьютерные программы, преобразующие программы в форме исходного текста на языке ассемблера в машинные команды в виде объектного кода.
* трансляторы - программы или технические средства, выполняющие трансляцию программы.
   * компиляторы - Программы, переводящие текст программы на языке высокого уровня, в эквивалентную программу на машинном языке.
   * интерпретаторы - Программы (иногда аппаратные средства), анализирующие команды или операторы программы и тут же выполняющие их
* компоновщики (редакторы связей) - программы, которые производят компоновку - принимают на вход один или несколько объектных модулей и собирают по ним исполнимый модуль.
* препроцессоры исходных текстов - компьютерные программы, принимающие данные на входе и выдающие данные, предназначенные для входа другой программы, например, компилятора.
* отладчик - модуль среды разработки или отдельным приложением, предназначенным для поиска ошибок в программе.
* текстовые редакторы - компьютерные программы, предназначенные для создания и изменения текстовых файлов, а также их просмотра на экране, вывода на печать, поиска фрагментов текста.
   * специализированные редакторы исходных текстов - текстовые редакторы для создания и редактирования исходного кода программ. Специализированный редактор исходных текстов может быть отдельным приложением, или быть встроен в интегрированную среду разработки (IDE).
* библиотеки подпрограмм - сборники подпрограмм или объектов, используемых для разработки программного обеспечения.
* редакторы графического интерфейса.
Перечисленные инструменты могут входить в состав интегрированных сред разработки
Виды инструментального ПО: Текстовые редакторы, Интегрированные среды разработки, SDK, Компиляторы, Интерпретаторы, Линковщики, Парсеры и генераторы парсеров, Ассемблеры, Отладчики, Профилировщики, Генераторы документации, Средства анализа покрытия кода, Средства непрерывной интеграции, Средства автоматизированного тестирования, Системы управления версиями


30.Методологии разработки программного обеспечения. Классификация. Особенности применения.


Методология - это система принципов, а также совокупность идей, понятий, методов, способов и средств, определяющих стиль разработки программного обеспечения. 
Методология - реализация стандарта. Сами стандарты лишь говорят о том, что должно быть, оставляя свободу выбора и адаптации. Конкретные вещи реализуется через выбранную методологию. Она определяет, как будет выполняться разработка. Есть много успешных методологий создания программного обеспечения. Выбор методологии зависит от размера команды, специфики, сложности проекта, стабильности и зрелости процессов в компании, личных качеств сотрудников. Методологии представляют собой ядро теории управления разработкой программного обеспечения. К существующей классификации в зависимости от используемой в ней модели жизненного цикла (водопадные и итерационные методологии) добавилась более общая классификация на прогнозируемые и адаптивные методологии. 
Прогнозируемые методологии фокусируются на детальном планировании будущего. Известны запланированные задачи и ресурсы на весь срок проекта. Команда с трудом реагирует на возможные изменения. План оптимизирован исходя из состава работ и существующих требований. Изменение требований может привести к существенному изменению плана, а также дизайна проекта. Часто создается специальный комитет по управлению изменениями, чтобы в проекте учитывались только самые важные требования.
Адаптивные методологии нацелены на преодоление ожидаемой неполноты требований и их постоянного изменения. Если меняются требования, команда разработчиков тоже меняется. Команда, участвующая в адаптивной разработке, с трудом может предсказать будущее проекта. Существует точный план лишь на ближайшее время. Удаленные во времени планы существуют лишь как декларации о целях проекта, ожидаемых затратах и результатах.
SCRUM - методология, предназначенная для небольших команд (до 10 человек). Весь проект делится на итерации (спринты) продолжительностью 30 дней каждый. Выбирается список функций системы, которые реализуются в течение следующего спринта. Самые важные условия - неизменность выбранных функций во время выполнения одной итерации и соблюдение сроков выпуска очередного релиза, даже если к его выпуску не удастся реализовать весь запланированный функционал. Руководитель разработки проводит ежедневные 20 минутные совещания, которые называют scrum, результатом которых является определение функции системы, реализованных за предыдущий день, возникшие сложности и план на следующий день. Такие совещания позволяют постоянно отслеживать ход проекта, быстро выявлять возникшие проблемы и оперативно на них реагировать.
KANBAN - гибкая методология разработки программного обеспечения, ориентированная на задачи. Основные правила: визуализация разработки (разделение работы на задачи; использование отметок о положение задачи в разработке); ограничение одновременных работ на каждом этапе разработки; измерение времени цикла (среднее время на выполнение одной задачи) и оптимизация процесса.
Преимущества KANBAN: уменьшение числа параллельно выполняемых задач значительно уменьшает время выполнения каждой отдельной задачи; быстрое выявление проблемных задач; вычисление времени на выполнение усредненной задачи.
DYNAMIC SYSTEM DEVELOPMENT METHOD создал консорциум из 17 английских компаний. Целая организация занимается разработкой пособий по этой методологии, организацией учебных курсов, программ аккредитации. Ценность DSDM имеет денежный эквивалент. Все начинается с изучения осуществимости программы и области ее применения. В первом случае, вы пытаетесь понять, подходит ли DSDM для данного проекта. Изучать область применения программы предполагается на короткой серии семинаров, где программисты узнают о сфере бизнеса, для которой им предстоит работать. Обсуждаются основные положения, касающиеся архитектуры будущей системы и план проекта. Далее процесс делится на три взаимосвязанных цикла: цикл функциональной модели отвечает за создание аналитической документации и прототипов, цикл проектирования и конструирования - за приведение системы в рабочее состояние, цикл реализации - обеспечивает развертывание программной системы. Принципы, на которых строится DSDM - активное взаимодействие с пользователями, частые выпуски версий, самостоятельность разработчиков в принятии решений и тестирование в течение всего цикла работ. Как другие гибкие методологии, DSDM использует короткие итерации, продолжительностью от двух до шести недель. Упор делается на качестве работы и адаптируемости к изменениям в требованиях.
MICROSOFT SOLUTIONS FRAMEWORK - методология разработки программного обеспечения, предложенная корпорацией Microsoft. MSF опирается на практический опыт Microsoft и описывает управление людьми и рабочими процессами в процессе разработки решения.
Базовые концепции и принципы модели процессов MSF:
* единое видение проекта - все заинтересованные лица и просто участники проекта должны представлять конечный результат, всем должна быть понятна цель проекта;
* управление компромиссами - поиск компромиссов между ресурсами проекта, календарным графиком и реализуемыми возможностями;
* гибкость - готовность к изменяющимся проектным условиям;
* концентрация на бизнес-приоритетах - сосредоточенность на отдаче и выгоде, которую ожидает получить потребитель решения;
* поощрение свободного общения внутри проекта;
* создание базовых версий - фиксация состояния любого проектного артефакта, в том числе программного кода, плана проекта, руководства пользователя, настройки серверов и последующее эффективное управление изменениями, аналитика проекта.


MSF предлагает проверенные методики для планирования, проектирования, разработки и внедрения успешных IT-решений. Благодаря гибкости, масштабируемости и отсутствию жестких инструкций MSF способен удовлетворить нужды организации или проектной группы любого размера. MSF состоит из принципов, моделей и дисциплин по управлению персоналом, процессами, технологическими элементами и связанными со этими факторами вопросами, характерными для большинства проектов.
RATIONAL UNIFIED PROCESS - методология разработки программного обеспечения, созданная компанией Rational Software. 
В основе методологии лежат 6 основных принципов:
* компонентная архитектура, реализуемая и тестируемая на ранних стадиях проекта;
* работа над проектом в сплочённой команде, ключевая роль в которой принадлежит архитекторам;
* ранняя идентификация и непрерывное устранение возможных рисков;
* концентрация на выполнении требований заказчиков к исполняемой программе;
* ожидание изменений в требованиях, проектных решениях и реализации в процессе разработки;
* постоянное обеспечение качества на всех этапах разработки проекта.


Использование методологии RUP направлено на итеративную модель разработки. Особенность методологии: степень формализации может меняться в зависимости от потребностей проекта. Можно по окончании каждого этапа и итерации создавать все требуемые документы и достигнуть максимального уровня формализации, а можно создавать только необходимые для работы документы, вплоть до их отсутствия. За счет этого подхода к формализации процессов методология является гибкой и популярной. Данная методология применима как в небольших и быстрых проектах, где за счет отсутствия формализации требуется сократить время выполнения проекта и расходы, так и в больших и сложных проектах, где требуется высокий уровень формализма, например, с целью дальнейшей сертификации продукта. Это преимущество дает возможность использовать одну и ту же команду разработчиков для реализации различных по объему и требованиям. 
Т.о., существует множество различных методологий разработки программного обеспечения, они не универсальны и описываются различными принципами. Выбор методологии разработки для конкретного проекта зависит от предъявляемых требований.


31. Программные средства для организации совместной разработки программного обеспечения.
Из-за больших объемов проектов разработка программного 
обеспечения ведется коллективом специалистов. Работая в  
коллективе, отдельные специалисты должны взаимодействовать 
друг с другом, обеспечивая целостность проекта, что при  
отсутствии удовлетворительных средств описания поведения сложных 
систем, упоминавшемся выше, достаточно сложно. Причем чем 
больше коллектив разработчиков, тем сложнее организовать 
процесс работы [8]. 
1. Пакеты прикладных программ 
Для визуализации, специфицирования, конструирования и 
документирования программных систем необходимо  
рассматривать их с различных точек зрения. Рассмотрим наиболее  
применяемые пакеты прикладных программ для коллективной  
разработки программного обеспечения. 
1, U Система контроля версий Microsoft Visual 
SourceSafe 
Microsoft Visual SourceSafe (Visual SourceSafe, VSS) -  
программный продукт компании Майкрософт, файл-серверная  
система управления версиями, предназначенная для небольших  
команд разработчиков. VSS позволяет хранить в общем хранилище 
файлы, разделяемые несколькими пользователями, для каждого 
файла хранится история версий. 
VSS входит в состав пакета Microsoft Visual Studio и  
интегрирован с продуктами этого пакета. Доступен только для  
платформы Windows. Версию для Unix поддерживает компания MainSoft.
Visual SourceSafe нацелен на индивидуальных разработчиков 
либо небольшие команды разработчиков. Там, где VSS  
недостаточно, ему на замену предлагается новый продукт  
Майкрософт - Visual Studio Team Foundation Server входящий в состав 
Visual Studio Team System. 
2. Система контроля версий Subversion 
Subversion - свободно распространяемая система управления 
версиями с открытым кодом. Subversion разработана специально 
для замены CVS, самой распространенной открытой системы 
управления версиями. Она обладает всеми основными  
функциями CVS (хотя некоторые из них выполняет другими способами) 
и лишена ряда ее недостатков. 
Subversion часто называют svn - по названию клиентской 
программы, входящей в ее дистрибутив. 
Subversion - централизованная система. Данные хранятся в 
едином хранилище. При сохранении новых версий используется 
дельта-компрессия, т. е. система находит отличия новой версии 
от предыдущей и записывает только их, избегая ненужного  
дублирования данных. Хранилище может располагаться на  
локальном диске или на сетевом сервере. К локальному хранилищу 
клиент Subversion обращается непосредственно. Для доступа к 
удаленному серверу может использоваться собственный сетевой 
протокол или стандартный протокол WebDAV, поддерживаемый 
с помощью специального модуля для веб-сервера Apache. 
Клиенты копируют файлы из хранилища, создавая  
локальные рабочие копии, затем модифицируют их и публикуют  
изменения в хранилище. Несколько клиентов могут одновременно 
обращаться к хранилищу. При использовании доступа с  
помощью WebDAV опционально поддерживается прозрачное  
управление версиями - если любой клиент WebDAV открывает для 
записи и затем сохраняет файл, хранящийся на сетевом ресурсе, 
автоматически создается новая версия.
32. Программный продукт. Жизненный цикл программного продукта.


Программное обеспечение (ПО) - это совокупность всей информации, данных и программ, которые обрабатываются компьютерными системами.
Системное ПО - это набор программ, которые управляют компонентами вычислительной системы
Программный продукт (ПП) - это программное обеспечение, предназначенное для удовлетворения потребностей пользователей широкого распространения и продажи (записанное на носителях данных; снабженное программной документацией).
Жизненный цикл программного обеспечения (ПО) - это непрерывный процесс, который начинается с момента принятия решения о необходимости создания ПО и заканчивается в момент его полного изъятия из эксплуатации
Модель жизненного цикла ПП - описание набора фаз (этапов, стадий) проекта по созданию ПО, в которых выполняются отдельные процессы, разбитые на операции и задачи.
 


33. Бизнес-процесс. Средства анализа и моделирования. Автоматизация бизнес-процессов.
Бизнес-процесс  
Бизнес-процесс - это совокупность взаимосвязанных мероприятий или задач, направленных на создание определённого продукта или услуги для потребителей. В качестве графического описания деятельности применяются блок-схемы бизнес-процессов.
Существуют три вида бизнес-процессов:
1. Управляющие - бизнес-процессы, которые управляют функционированием системы. Примером управляющего процесса может служить Корпоративное управление и Стратегический менеджмент.
2. Операционные - бизнес-процессы, которые составляют основной бизнес компании и создают основной поток доходов. Примерами операционных бизнес-процессов являются Снабжение, Производство,Маркетинг и Продажи.
3. Поддерживающие - бизнес-процессы, которые обслуживают основной бизнес. Например,Бухгалтерский учет, Подбор персонала, Техническая поддержка, АХО.
Бизнес-процесс может быть декомпозирован на несколько подпроцессов, процедур и функций, которые имеют собственные атрибуты, однако также направлены на достижение цели основного бизнес-процесса. Такой анализ бизнес-процессов обычно включает в себя составление карты бизнес-процесса и его подпроцессов, разнесенных между определенными уровнями активности.
Бизнес-процессы должны быть построены таким образом, чтобы создавать стоимость и ценность для потребителей и исключать любые необязательные или вовсе лишние активности. На выходе правильно построенных бизнес-процессов увеличиваются ценность для потребителя ирентабельность (меньшая себестоимость производства товара или услуги).
Бизнес-процессы могут подвергаться различному анализу в зависимости от целей моделирования. Анализ бизнес-процессов может применяться при бизнес-моделировании,функционально-стоимостном анализе, формированииорганизационной структуры, реинжиниринге бизнес-процессов, автоматизации технологических процессов.
Одним из методов анализа текущей деятельности является составление модели бизнес-процесса как есть (англ. as is). После этого модель бизнес-процесса подвергается критическому анализу или обрабатывается специальным программным обеспечением. По результатам анализа формируется модель бизнес-процесса как должно быть (англ. to be) и план мероприятий по внедрению необходимых изменений.
Существует множество нотаций, применяемых для моделирования бизнес-процессов, например:
* BPMN - функциональная последовательность работ;
* EPC - событийная последовательность работ;
* IDEF0 - логическая последовательность работ.




средства анализа и моделирования
* Business studio
* Casewise Corporate Modeler Suite
* ERwin Process Modeler (старое название - BPwin)
* Методология ARIS: VAD, eEPC (англ.)
* PayDox






34. Архитектура вычислительной системы, разновидности.
Вычислительная система - это совокупность одного или нескольких компьютеров или процессоров, программного обеспечения и периферийного оборудования, организованная для совместного выполнения информационно-вычислительных процессов.
Архитектура ВС - совокупность характеристик и параметров, определяющих функционально-логическую и структурную организацию системы. 


Наиболее распространены следующие архитектурные решения.
Архитектура фон Неймана - широко известный принцип совместного хранения команд и данных в памяти компьютера. Вычислительные системы такого рода часто обозначают термином машина фон Неймана, однако соответствие этих понятий не всегда однозначно. В общем случае, когда говорят об архитектуре фон Неймана, подразумевают принцип хранения данных и инструкций в одной памяти.
  


Принципы фон Неймана
Принцип однородности памяти 
Команды и данные хранятся в одной и той же памяти и внешне в памяти неразличимы. Распознать их можно только по способу использования; то есть одно и то же значение в ячейке памяти может использоваться и как данные, и как команда, и как адрес в зависимости лишь от способа обращения к нему. Это позволяет производить над командами те же операции, что и над числами, и, соответственно, открывает ряд возможностей. Так, циклически изменяя адресную часть команды, можно обеспечить обращение к последовательным элементам массива данных. Такой прием носит название модификации команд и с позиций современного программирования не приветствуется. Более полезным является другое следствие принципа однородности, когда команды одной программы могут быть получены как результат исполнения другой программы. Эта возможность лежит в основе трансляции - перевода текста программы с языка высокого уровня на язык конкретной вычислительной машины.
Принцип адресности 
Структурно основная память состоит из пронумерованных ячеек, причем процессору в произвольный момент доступна любая ячейка. Двоичные коды команд и данных разделяются на единицы информации, называемые словами, и хранятся в ячейках памяти, а для доступа к ним используются номера соответствующих ячеек - адреса.
Принцип программного управления 
Все вычисления, предусмотренные алгоритмом решения задачи, должны быть представлены в виде программы, состоящей из последовательности управляющих слов - команд. Каждая команда предписывает некоторую операцию из набора операций, реализуемых вычислительной машиной. Команды программы хранятся в последовательных ячейках памяти вычислительной машины и выполняются в естественной последовательности, то есть в порядке их положения в программе. При необходимости, с помощью специальных команд, эта последовательность может быть изменена. Решение об изменении порядка выполнения команд программы принимается либо на основании анализа результатов предшествующих вычислений, либо безусловно.
Принцип двоичного кодирования 
Согласно этому принципу, вся информация, как данные, так и команды, кодируются двоичными цифрами 0 и 1. Каждый тип информации представляется двоичной последовательностью и имеет свой формат. Последовательность битов в формате, имеющая определенный смысл, называется полем. В числовой информации обычно выделяют поле знака и поле значащих разрядов. В формате команды можно выделить два поля: поле кода операции и поле адресов.


Гарвардская архитектура[7] - архитектура последовательных ВС, в которой память физически и логически разделена на две части: память программ и память данных (см. рис. 3). Впервые архитектура была реализована на машине Mark I, построенной в Гарвардском университете. Блок управления может считывать команды из памяти программ. АЛУ может считывать и записывать данные из памяти данных. Так как для доступа к памяти программ и памяти данных используются разные каналы, то возможен одновременный доступ к ним. Кроме этого, они могут иметь разные физические характеристики и логическую организацию (размер и разрядность слова)
 
Параллельная обработка информации
Классификация Флинна
Существует много классификаций ВС. Классификация Флинна [2, 3] - самая ранняя (1966) из известных. Она делит ВС на четыре класса в зависимости от числа потоков команд и числа потоков обрабатываемых ими данных. Поток - последовательность команд или данных, выполняемая или обрабатываемая процессором.
 


SISD (single instruction stream / single data stream) - один поток команд / один поток данных.
К SISD относятся последовательные ВС с архитектурой фон Неймана. Эти ВС имеют один центральный процессор, способный обрабатывать только один поток последовательно исполняемых инструкций. Команды работают со скалярными данными. Одна команда может выполнять одну операцию с потоком данных. Для увеличения производительности в SISD может использоваться конвейерная обработка. Примеры машин данного класса - PDP-11, VAX 11/780, CDC 6600, CDC 7700, AMDAHL 470/6.
SIMD (Single Instruction/Multiple Data) - один поток команд / много потоков данных. В данной архитектуре сохраняется один поток данных, но при этом имеются векторные команды. Такие команды могут выполнять одну операцию над многими элементами данных. Примеры машин данного класса - ILLIAC IV, CRAY-1, OMEN-64, ICL DAP, Goodyear Aerospace MPP, Connection Machine 1.
MISD (Multiple Instruction/ Single Data) - один поток данных/много потоков команд. Примеров ВС данного класса нет, он введен только для полноты.
MIMD - (Multiple Instruction/Multiple Data) много потоков данных/много потоков команд. К данному классу относятся все современные многопроцессорные ВС, например, IDV RS/6000 SP, HP 6000, Cray T3E, Cray T90, Sun HPC 10000, NUMA-Q 2000.




35. Аппаратное обеспечение вычислительных систем.
Аппаратное обеспечение - электронные и механические части вычислительного устройства, входящие в состав системы или сети. Аппаратное обеспечение включает: компьютеры и логические устройства, внешние устройства и диагностическую аппаратуру, энергетическое оборудование, батареи и аккумуляторы. Персональный компьютер: Материнская плата (центральный процессор, оперативная память и кэш, слоты расширения шин - PCI, PCI-E, USB, FireWire, контроллеры устройств - хранения: IDE, SCSI, SATA, SAS, Видеоконтроллер, Звуковой контроллер,  Сетевой интерфейс (сетевая плата)); Блок питания; Система охлаждения, Жесткий диск. Внешние устройства (периферийные): Устройства ввода (Клавиатура, Мышь, трекбол или тачпад, Джойстик, Сканер, Микрофон); Устройства вывода (Монитор, Колонки/наушники, Печатающие устройства); Сетевое оборудование (маршрутизатор, сетевой коммутатор, беспроводная точка доступа).


36. Архитектура вычислительной сети.
Архитектура вычислительной сети - совокупность стандартов, топологий и протоколов, необходимых для ее функционирования. Наиболее распространенные стандартные архитектуры локальных вычислительных сетей (рис. 2.1): - Ethernet - IEEЕ 802.3; - Token bus-IEЕЕ 802.4; - Token ring - IEЕЕ 802.5. Рисунок 2.1. - Стандартные локальные вычислительные сети Архитектура Ethernet - IEEE 802.3
 
Вычислительная сеть (network) - это совокупность компьютеров, соединенных линиями связи (кабели, сетевые адаптеры, телекоммуникационное оборудование).
Вычислительная сеть (network):
·         оборудование
·         среды передачи данных
·         сообщения
·         правила обмена сообщениями
Сетевая топология - описание конфигурации сети, схема расположения и соединения сетевых устройств.
·         физическая
·         логическая
·         информационная
·         управления обменом
Топология типа шина, представляет собой общий кабель, к которому подсоединены все рабочие станции.
 шина.png 

·         Достоинства
o   Скорость развертывания;
o   Невысокая стоимость;
o   Простота настройки;
o   Выход из строя рабочей станции не отражается на работе сети;
·       Недостатки
o   Обрыв кабеля - отказ всей сети;
o   Сложная локализация неисправностей;
o   Плохая масштабируемость.
 
Кольцо - базовая топология компьютерной сети, в которой рабочие станции подключены последовательно друг к другу, образуя замкнутую сеть.
 кольцо.png 

·         Достоинства
o    Простота развертывания;
o    Сохранение производительности при высоких нагрузках;
·         Недостатки
o    Отказ любой станции/обрыв кабеля - отказ всего кольца;
o    Сложность управления/диагностики.
 
Звезда - базовая топология сети, в которой все компьютеры сети присоединены к центральному узлу (обычно сетевой коммутатор).
 звезда.png 

·         Достоинства
o    Масштабируемость;
o    Простота управления/диагностики;
o    Высокая производительность;
o    Выход из строя рабочей станции не отражается на работе сети;
·         Недостатки
o    Отказ центрального узла - отказ всей сети;
o    Повышенная стоимость;
 
Смешанная топология
При смешанной топологии в одной сети используются разные виды топологий, т. е. отдельные сегменты сети имеют разную топологию (общую шину, кольцо, звезду).
 смешаная.png 



37. Виртуализация вычислительных ресурсов. "Облачные" вычисления.
Облачные вычисления - информационно-технологическая концепция, подразумевающая обеспечение повсеместного и удобного сетевого доступа по требованию к общему пулу конфигурируемых вычислительных ресурсов (например, сетям передачи данных, серверам, устройствам хранения данных, приложениям и сервисам - как вместе, так и по отдельности), которые могут быть оперативно предоставлены и освобождены с минимальными эксплуатационными затратами или обращениями к провайдеру.
Национальным институтом стандартов и технологий США зафиксированы следующие обязательные характеристики облачных вычислений:
·         Самообслуживание по требованию - потребитель самостоятельно определяет и изменяет вычислительные потребности, такие как серверное время, скорости доступа и обработки данных, объём хранимых данных без взаимодействия с представителем поставщика услуг;
·         Универсальный доступ по сети - услуги доступны потребителям по сети передачи данных вне зависимости от используемого терминального устройства;
·         Объединение ресурсов - поставщик услуг объединяет ресурсы для обслуживания большого числа потребителей в единый пул для динамического перераспределения мощностей между потребителями в условиях постоянного изменения спроса на мощностиЭластичность - услуги могут быть предоставлены, расширены, сужены в любой момент времени, без дополнительных издержек на взаимодействие с поставщиком, как правило, в автоматическом режиме;
·         Учёт потребления - поставщик услуг автоматически исчисляет потреблённые ресурсы на определённом уровне абстракции (например, объём хранимых данных, пропускная способность, количество пользователей, количество транзакций), и на основе этих данных оценивает объём предоставленных потребителям услуг.
С точки зрения поставщика, благодаря объединению ресурсов и непостоянному характеру потребления со стороны потребителей, облачные вычисления позволяют экономить на масштабах, используя меньшие аппаратные ресурсы, чем требовались бы при выделенных аппаратных мощностях для каждого потребителя, а за счёт автоматизации процедур модификации выделения ресурсов существенно снижаются затраты на абонентское обслуживание.
С точки зрения потребителя эти характеристики позволяют получить услуги с высоким уровнем доступности и низкими рисками неработоспособности, обеспечить быстрое масштабирование вычислительной системы благодаря эластичности без необходимости создания, обслуживания и модернизации собственной аппаратной инфраструктуры.
Модели развёртывания
* ·         Частное облако - инфраструктура, предназначенная для использования одной организацией, включающей несколько потребителей (например, подразделений одной организации), возможно также клиентами и подрядчиками данной организации.
* ·         Публичное облако - инфраструктура, предназначенная для свободного использования широкой публикой.
* ·         Общественное облако - вид инфраструктуры, предназначенный для использования конкретным сообществом потребителей из организаций, имеющих общие задачи.
* ·         Гибридное облако - это комбинация из двух или более различных облачных инфраструктур (частных, публичных или общественных), остающихся уникальными объектами, но связанных между собой стандартизованными или частными технологиями передачи данных и приложений.
Модели обслуживания
* ·         Программное обеспечение как услуга (SaaS, англ. Software-as-a-Service) - модель, в которой потребителю предоставляется возможность использования прикладного программного обеспечения провайдера, работающего в облачной инфраструктуре и доступного из различных клиентских устройств или посредством тонкого клиента, например, из браузера (например, веб-почта) или посредством интерфейса программы. Контроль и управление основной физической и виртуальной инфраструктурой облака, в том числе сети, серверов, операционных систем, хранения, или даже индивидуальных возможностей приложения (за исключением ограниченного набора пользовательских настроек конфигурации приложения) осуществляется облачным провайдером.
* ·         Платформа как услуга (PaaS, англ. Platform-as-a-Service) - модель, когда потребителю предоставляется возможность использования облачной инфраструктуры для размещения базового программного обеспечения для последующего размещения на нём новых или существующих приложений. В состав таких платформ входят инструментальные средства создания, тестирования и выполнения прикладного программного обеспечения - системы управления базами данных, связующее программное обеспечение, среды исполнения языков программирования - предоставляемые облачным провайдером.
* ·         Инфраструктура как услуга (IaaS, англ. Infrastructure-as-a-Service) предоставляется как возможность использования облачной инфраструктуры для самостоятельного управления ресурсами обработки, хранения, сетями и другими фундаментальными вычислительными ресурсами, например, потребитель может устанавливать и запускать произвольное программное обеспечение, которое может включать в себя операционные системы, платформенное и прикладное программное обеспечение
Технологии
Для обеспечения согласованной работы узлов вычислительной сети на стороне облачного провайдера используется специализированное связующее программное обеспечение, обеспечивающее мониторинг состояния оборудования и программ, балансировку нагрузки, обеспечение ресурсов для решения задачи.
Одним из основных решений для сглаживания неравномерности нагрузки на услуги является размещение слоя серверной виртуализации между слоем программных услуг и аппаратным обеспечением. В условиях виртуализации балансировка нагрузки может осуществляться посредством программного распределения виртуальных серверов по реальным, перенос виртуальных серверов происходит посредством живой миграции.




38. Способы реализации человеко-машинного взаимодействия.
Человеко-машинное взаимодействие (ЧМВ)
ЧМВ, или иначе пользовательский интерфейс (ПИ) обеспечивает связь между пользователем и компьютером
Взаимодействие - обмен действиями и реакциями на эти действия между компьютером и пользователем. Это обеспечивает интерфейс пользователя.
Интерфейс включает:
- язык представления - общение компьютера с пользователем,
- язык действий - общение пользователя с компьютером,
- представление пользовательского интерфейса.
Имеется ряд стилей взаимодействий, которые делятся на два основных вида.
Первый - текстовой (ввод команд текстовыми средствами);
Второй - графический (непосредственное манипулирование).
Способы связи пользователя с компьютером:
·         Языки команд - пользователь управляет системой, вводя соответствующие команды в тестовом режиме.
*  Вопрос и ответ - диалог, где компьютер задает вопросы, а пользователь отвечает ему (или наоборот).
* Формы - пользователь заполняет формы или поля диалога, вводя данные в необходимые поля.
* Меню - пользователь обеспечен рядом опций и управляет системой, выбирая необходимые пункты.
* Прямое манипулирование - пользователь управляет объектами на экране посредством устройства манипулирования, типа мыши.
Формы - основной элемент интерфейса. Назначение форм - удобный ввод и просмотр данных, состояния, сообщений автоматизированной системы.
Основные принципы проектирования форм:
* Форма проектируется для более удобного, более понятного и скорейшего достижения решения поставленной задачи.
* Размещение информационных единиц на пространстве формы должно соответствовать логике ее будущего использования.
* Важно использовать незаполненное пространство, чтобы создать равновесие и симметрию среди информационных элементов формы, для фиксации внимания пользователя в нужном направлении.
* Логические группы элементов необходимо отделять пробелами, строками, цветовыми или другими визуальными средствами.
*  Взаимозависимые или связанные элементы должны отображаться в одной форме.
Требования к графическому интерфейсу:
1. Содержать привычные и понятные пользователю пункты меню, соответствующие функциям обработки;
2. Ориентироваться на пользователя, который общается с программой на внешнем уровне взаимодействия;
3. Удовлетворять правилу "шести" - в одну линейку меню включать не более 6 понятий, каждое из которых содержит не более 6 опций;
4. Сохранять стандартизированное назначение и местоположение на экране графических объектов.
Основная цель создаваемого интерфейса состоит в том, чтобы минимизировать общую информацию на экране и представить только то, что является необходимым для пользователя.
При создании интерфейса предполагается:
- отображение информации настолько эффективно, насколько это возможно для человеческого восприятия, и
- создание отображение на дисплее таким образом, чтобы привлечь внимание к наиболее важным единицам информации.
Основные признаки хорошего ПИ:
1. Естественность (интуитивность).
2. Согласованность и непротиворечивость.
3. Дружественность.
4. Простота и не избыточность.
5. Непосредственный доступ к системе помощи
6. Гибкость.
7. Эстетическая привлекательность.
39. Принципы защиты информации в вычислительных системах и сетях.
Безопасность информационной системы - это свойство, заключающее в способности системы обеспечить ее нормальное функционирование, то есть обеспечить целостность и секретность информации. Для обеспечения целостности и конфиденциальности информации необходимо обеспечить защиту информации от случайного уничтожения или несанкционированного доступа к ней.
Под целостностью понимается невозможность несанкционированного или случайного уничтожения, а также модификации информации. Под конфиденциальностью информации - невозможность утечки и несанкционированного завладения хранящейся, передаваемой или принимаемой информации.
Известны следующие источники угроз безопасности информационных систем:
-         антропогенные источники, вызванные случайными или преднамеренными действиями субъектов;
-         техногенные источники, приводящие к отказам и сбоям технических и программных средств из-за устаревших программных и аппаратных средств или ошибок в ПО;
-         стихийные источники, вызванные природными катаклизмами или форс-мажорными обстоятельствами.
В свою очередь антропогенные источники угроз делятся:
-         на внутренние (воздействия со стороны сотрудников компании) и внешние (несанкционированное вмешательство посторонних лиц из внешних сетей общего назначения) источники;
-         на непреднамеренные (случайные) и преднамеренные действия субъектов.
Направления утечки информации:
-         перехват информации;
-         модификация информации (исходное сообщение или документ изменяется или подменяется другим и отсылается адресату);
-         подмена авторства информации (кто-то может послать письмо или документ от вашего имени);
-         использование недостатков операционных систем и прикладных программных средств;
-         копирование носителей информации и файлов с преодолением мер защиты;
-         незаконное подключение к аппаратуре и линиям связи;
-         маскировка под зарегистрированного пользователя и присвоение его полномочий;
-         введение новых пользователей;
-         внедрение компьютерных вирусов и так далее.
Для обеспечения безопасности информационных систем применяют системы защиты информации, которые представляют собой комплекс организационно - технологических мер, программно - технических средств и правовых норм, направленных на противодействие источникам угроз безопасности информации.
К средствам защиты информации ИС от действий субъектов относятся:
-         средства защита информации от несанкционированного доступа;
-         защита информации в компьютерных сетях;
-         криптографическая защита информации;
-         электронная цифровая подпись;
-         защита информации от компьютерных вирусов.
Средства защита информации от несанкционированного доступа
Получение доступа к ресурсам информационной системы предусматривает выполнение трех процедур: идентификация, аутентификация и авторизация. 
Идентификация - присвоение пользователю (объекту или субъекту ресурсов) уникальных имен и кодов (идентификаторов).
Аутентификация - установление подлинности пользователя, представившего идентификатор или проверка того, что лицо или устройство, сообщившее идентификатор является действительно тем, за кого оно себя выдает. Наиболее распространенным способом аутентификации является присвоение пользователю пароля и хранение его в компьютере.
Авторизация - проверка полномочий или проверка права пользователя на доступ к конкретным ресурсам и выполнение определенных операций над ними. Авторизация проводится с целью разграничения прав доступа к сетевым и компьютерным ресурсам.
Криптографическая защита информации
Для обеспечения секретности информации применяется ее шифрование или криптография. Для шифрования используется алгоритм или устройство, которое реализует определенный алгоритм. Управление шифрованием осуществляется с помощью изменяющегося кода ключа. 
Извлечь зашифрованную информацию можно только с помощью ключа.
Криптография - это очень эффективный метод, который повышает безопасность передачи данных в компьютерных сетях и при обмене информацией между удаленными компьютерами.
Электронная цифровая подпись
Электронная цифровая подпись - это последовательность символов, полученная в результате криптографического преобразования исходного сообщения с использованием закрытого ключа и позволяющая определять целостность сообщения и принадлежность его автору при помощи открытого ключа.
Другими словами сообщение, зашифрованное с помощью закрытого ключа, называется электронной цифровой подписью. Отправитель передает незашифрованное сообщение в исходном виде вместе с цифровой подписью. Получатель с помощью открытого ключа расшифровывает набор символов сообщения из цифровой подписи и сравнивает их с набором символов незашифрованного сообщения.
При полном совпадении символов можно утверждать, что полученное сообщение не модифицировано и принадлежит его автору.
Защита информации от компьютерных вирусов
Компьютерный вирус - это небольшая вредоносная программа, которая самостоятельно может создавать свои копии и внедрять их в программы (исполняемые файлы), документы, загрузочные сектора носителей данных и распространяться по каналам связи.
В зависимости от среды обитания основными типами компьютерных вирусов являются:
-         Программные (поражают файлы с расширением .СОМ и .ЕХЕ) вирусы
-         Загрузочные вирусы
-         Макровирусы
-         Сетевые вирусы


40. Операционная система. Понятие и основные задачи. Классификация операционных систем.
Операционная система (ОС) - это совокупность программных средств, осуществляющих управление ресурсами ЭВМ, запуск прикладных программ и их взаимодействие с внешними устройствами и другими программами, а также обеспечивающих диалог пользователя с компьютером.
Программный интерфейс - это совокупность средств, обеспечивающих взаимодействие устройств и программ в рамках вычислительной системы.
Пользовательский интерфейс - это программные и аппаратные средства взаимодействия пользователя с программой или ЭВМ.
Операционные системы классифицируются по:
-         количеству одновременно работающих пользователей: однопользовательские, многопользовательские:
В соответствии с первым признаком классификации многопользовательские операционные системы, в отличие от однопользовательских, поддерживают одновременную работу на ЭВМ нескольких пользователей за различными терминалами.
-         числу процессов, одновременно выполняемых под управлением системы: однозадачные, многозадачные:
Второй признак предполагает деление ОС на многозадачные и однозадачные. Понятие многозадачности означает поддержку параллельного выполнения нескольких программ, существующих в рамках одной вычислительной системы, в один момент времени. Однозадачные ОС поддерживают режим выполнения только одной программы в отдельный момент времени.
-         количеству поддерживаемых процессоров: однопроцессорные, многопроцессорные:
В соответствии с третьим признаком многопроцессорные ОС, в отличие от однопроцессорных, поддерживают режим распределения ресурсов нескольких процессоров для решения той или иной задачи.
-         разрядности кода ОС: 8-разрядные, 16-разрядные, 32-разрядные, 64-разрядные
Четвёртый признак подразделяет операционные системы на 8-, 16-, 32- и 64- разрядные. При этом подразумевается, что разрядность операционной системы не может превышать разрядности процессора.
-         типу интерфейса: командные (текстовые) и объектно-ориентированные (графические)
В соответствии с пятым признаком ОС по типу пользовательского интерфейса делятся на объектно-ориентированные (как правило, с графическим интерфейсом) и командные (с текстовым интерфейсом).
-         типу доступа пользователя к ЭВМ: с пакетной обработкой, с разделением времени, реального времени
Согласно шестому признаку ОС подразделяются на системы:
·         пакетной обработки, в которых из программ, подлежащих выполнению, формируется пакет (набор) заданий, вводимых в ЭВМ и выполняемых в порядке очерёдности с возможным учётом приоритетности;
·         разделения времени (TSR), обеспечивающих одновременный диалоговый (интерактивный) режим доступа к ЭВМ нескольких пользователей на разных терминалах, которым по очереди выделяются ресурсы машины, что координируется операционной системой в соответствии с заданной дисциплиной обслуживания;
·         реального времени, обеспечивающих определённое гарантированное время ответа машины на запрос пользователя с управлением им какими-либо внешними по отношению к ЭВМ событиями, процессами или объектами.
-         типу использования ресурсов: сетевые, локальные.
 В большинстве случаев сетевые операционные системы устанавливаются на один или более достаточно мощных компьютеров-серверов, выделяемых исключительно для обслуживания сети и совместно используемых ресурсов.
1. ОС семейство DOS
Первый представитель этого семейства - система MS-DOS (Microsoft Disk Operatinq System - дисковая операционная система фирмы Microsoft) была выпущена в 1981 году в связи с появлением IBM РС.
Операционные системы семейства DOS являются однозадачными и обладают следующими характерными чертами и особенностями:
-         интерфейс с ЭВМ осуществляется с помощью команд, вводимых пользователем;
-         модульность структуры, упрощающая перенос на другие типы ЭВМ;
-         небольшой объём доступной оперативной памяти (640 Кбайт).
-         Существенным недостатком операционных систем семейства DOS является отсутствие средств защиты от несанкционированного доступа к ресурсам ПК и ОС.
2. ОС семейства ОS/2
ОС ОS/2 была разработана фирмой IВМ в 1987 году в связи с созданием нового семейства ПК РS/2. ОS/2 (Operatinq System 2) является многозадачной операционной системой второго поколения. Она является 32-разрядной графической многозадачной операционной системой для IВМ РС- совместимых компьютеров, позволяет организовать параллельную работу нескольких прикладных программ, обеспечивая при этом защиту одной программы от другой и операционной системы от работающих в ней программ. ОС ОS/2 обладает удобным графическим пользовательским интерфейсом и совместима с файловой системой DOS, что даёт возможность использовать данные как в DOS, так и в ОС ОS/2 без каких-либо преобразований.
3. Операционные системы семейства UNIX
Операционные системы семейства UNIX - это 32-разрядные многозадачные многопользовательские операционные системы. Сильная сторона UNIX состоит в том, что одна и та же система используется на различных компьютерах - от суперкомпьютера до ПК, что даёт возможность переноса системы с одной машины на другую с минимальными затратами.
UNIX объединяет в себе: доступ к распределенным базам данных, локальные сети, удалённую дистанционную связь и возможность выхода в глобальные сети, используя обычный модем. Почтовая служба в UNIX - одна из важнейших её компонент. В настоящее время существует большое количество приложений для UNIX. Большинство популярных приложений для DOS и Windows могут эксплуатироваться в UNIX.
4. ОС семейства Windows
ОС семейства Windows разработаны фирмой Microsoft. Они являются многозадачными операционными системами, предоставляющими удобный графический интерфейс. Основными представителями данного семейства являются ОС Windows 95 и ОС Windows NT. Windows 95 разработана на базе ОС MS-DOS и операционных оболочек Windows 3.х.
Windows 95 является частично 32-разрядной, частично 16-разрядно операционной системой.
Операционная система Windows NT- одна из наиболее распространённых 32-разрядных сетевых ОС. Windows NT выпускается в двух модификациях: Windows NT Server и Windows NT WorkStation.
Windows NT Server в первую очередь предназначен для управления сетевыми ресурсами. Система обеспечивает высокую мобильность и безопасность без потери производительности. Windows NT Server содержит средства для организации быстрого поиска информации и просмотра ресурсов глобальных сетей, обеспечивает возможность использования любых каналов связи (включая обычные телефонные линии), поддерживает до 256 одновременных подключений к одному серверу, а несколько серверов могут быть использованы для организации общедоступной сетевой службы.
Windows NT WorkStation- это версия ОС Windows NT, предназначенная для работы на локальных компьютерах и рабочих станциях. Она является полностью 32-разрядной операционной системой, наиболее защищённой и надёжной. Windows NT WorkStation целесообразно использовать, когда необходима надёжная защита конфиденциальных данных или программ, а также при выполнении инженерных, научных, статистических и других работ, когда важна высокая производительность при анализе больших объёмов данных.
5. Семейство ОС реального времени
Операционная система реального времени (ОС РВ) - операционная система, которая гарантирует определённое время реакции системы. Как правило, это время колеблется от нескольких микросекунд до нескольких десятых долей секунды.
ОС РВ в основном применяется в автоматизации таких областей, как добыча и транспортировка нефти и газа, управление технологическими процессами в металлургии и машиностроении, управление химическими процессами, водоснабжение, энергетика, управление роботами.
Основные задачи ОС
1.  поддержка работы программ, обеспечение их взаимодействия с аппаратной частью и друг с другом;
2. распределение ресурсов (процессорного времени, оперативной памяти, дискового пространства и т.п.); организация файловой системы (системы хранения данных на внешних носителях информации); учет использования ресурсов, управление видеосистемой;
3. обработка ошибочных ситуаций; защита информации;
4. поддержка возможности для пользователя управлять машиной с помощью специальных команд (обработка командного языка в процедурной среде) или воздействием на определённые объекты (кнопки и др. в объектно-ориентированной среде);
5. поддержка сети.


41. Файловая система и принципы построения и основные функции.
Файловая система - порядок, определяющий способ организации, хранения и именования данных на носителях информации в компьютерах, а также в другом электронном оборудовании.  Файловая система определяет формат содержимого и способ физического хранения информации, которую принято группировать в виде файлов. Конкретная файловая система определяет размер имен файлов и (каталогов), максимальный возможный размер файла и раздела, набор атрибутов файла. Некоторые файловые системы предоставляют сервисные возможности, например, разграничение доступа или шифрование файлов.
Принцип организации файловой системы - табличный. Данные о том, в каком месте на диске записан файл, хранится в таблице размещения файлов (File Allocation Table, FAT).
Эта таблица размещается в начале тома. В целях защиты тома на нем хранятся две копии FAT. В случае повреждения первой копии FAT дисковые утилиты могут воспользоваться второй копией для восстановления тома. FAT располагается за пределами области диска, видимой для файловой системы. FAT16, FAT32, NTFS (Для обеспечения целостности данных в NTFS имеется журнал транзакций; Поддержка работы с длинными именами).
Функции: 
1. Создание, удаление, переименование (и другие операции) именованных наборов данных (файлов).
2. Работа с недисковыми периферийными устройствами как с файлами.
3. Обмен данными между файлами, между устройствами, между файлом и устройством (и наоборот);
4. Работа с файлами путем обращений к программным модулям системы управления файлами (часть API ориентирована именно на работу с файлами);
5. Защита файлов от несанкционированного доступа.


42. Понятие машинного обучения и искусственного интеллекта. Решаемые задачи.
Машинное обучение - обширный подраздел искусственного интеллекта, математическая дисциплина, использующая разделы математической статистики, численных методов оптимизации, теории вероятностей, дискретного анализа выделяющая знания из данных. Различают два типа обучения.
Классические задачи, решаемые с помощью машинного обучения
·         Классификация как правило, выполняется с помощью обучения с учителем на этапе собственно обучения.
·         Кластеризация как правило, выполняется с помощью обучения без учителя
·         Регрессия как правило, выполняется с помощью обучения с учителем на этапе тестирования, является частным случаем задач прогнозирования.
·         Понижение размерности данных и их визуализация выполняется с помощью обучения без учителя
·         Восстановление плотности распределения вероятности по набору данных
·         Одноклассовая классификация и выявление новизны
·         Построение ранговых зависимостей
Искусственный интеллект - раздел компьютерной лингвистики и информатики, занимающийся формализацией проблем и задач, которые напоминают задачи, выполняемые человеком. При этом, в большинстве случаев алгоритм решения задачи неизвестен заранее.
Одна из классификаций выделяет два подхода к разработке искусственного интеллекта:
нисходящий, семиотический - создание символьных систем, моделирующих высокоуровневые психические процессы : мышление, суждения, речь, эмоции, творчество и т. д.;
восходящий, биологический - изучение нейронных сетей и эволюционные вычисления, моделирующие интеллектуальную поведение на основе меньших не интеллектуальных элементов.
Искусственный интеллект - очень молодая область исследований, начало 1956 . Ее исторический путь напоминает синусоиду , каждый взлет которой инициировался некоторой новой идеей. На сегодня ее развитие находится на спаде, уступая применению уже достигнутых результатов в других областях науки, промышленности , бизнесе и даже повседневной жизни.




43. Методы сжатия графической информации. Области применения различных методов.
RLE - используется в форматах PCX - в качестве основного метода и в форматах BMP, TGA,TIFF в качестве одного из доступных.
Простой алгоритм сжатия данных, который оперирует сериями данных, то есть последовательностями, в которых один и тот же символ встречается несколько раз подряд. При кодировании строка одинаковых символов, составляющих серию, заменяется строкой, которая содержит сам повторяющийся символ и количество его повторов.
В данном алгоритме признаком счетчика (counter) служат единицы в двух верхних битах считанного файла. Соответственно оставшиеся 6 бит расходуются на счетчик, который может принимать значения от 1 до 64. Строку из 64 повторяющихся байтов мы превращаем в два байта, т.е. сожмем в 32 раза.
       WWWWWWBWWWWWWWWWWWWBBBWWWWBWWWWWWWWWWWWW
         Если мы применим простое кодирование длин серий к этой строке, то получим следующее:
6W1B12W3B4W1B13W
Однако, в случае, если строка состоит из большого количества неповторяющихся символов, её объем может вырасти.
ABCABCABCABCDDEFFFFFFFF1A1B1C1A1B1C1A1B1C1A1B1C2D1E8F
Проблема решается достаточно просто. Алфавит, в котором записаны длины серий, разделяется на две (обычно равные) части. Алфавит целых чисел можно, например, разделить на две части: положительные и отрицательные. Положительные используют для записи количества повторяющихся одинаковых символов, а отрицательные - для записи количества неодинаковых.
-12ABCABCABCABC2D1E8F
Метод сжатия LZW
Название алгоритм получил по первым буквам фамилий его разработчиков - Lempel, Ziv и Welch. Модификация LZ78. За счет предварительного занесения в словарь всех имволов алфавита входной последовательности результат работы LZW состоит только из последовательности индексов фраз словаря. Из-за устранения необходимости регулярной передачи одного символа в явном виде LZW обеспечивает лучшее сжатие, чем LZ78.
Таблица словаря для LZW состоит из 4096 строк. коды 256 и 257 являются служебными. 258 ... 4095 содержат непосредственно сжимаемую информацию.
Коэффициенты компрессии: Примерно 1000, 4, 5/7 (Лучший, средний, худший коэффициенты).
Сжатие в 1000 раз достигается только на одноцветных изображениях, размер которых кратен примерно 7 Мб.
Класс изображений: Ориентирован LZW на 8-битные изображения, построенные на компьютере. Сжимает за счет одинаковых подцепочек в потоке.
LZW реализован в форматах GIF и TIFF
JPEG - практически является стандартом де-факто для полноцветных изображений. Оперирует областями 8x8, на которых яркость и цвет меняются сравнительно плавно. Вследствие этого, при разложении матрицы такой области в двойной ряд по косинусам значимыми оказываются только первые коэффициенты. Таким образом, сжатие в JPEG осуществляется за счет плавности изменения цветов в изображении.
Алгоритм разработан в 1991 году группой экспертов в области фотографии специально для сжатия 24-битных изображений. JPEG - Joint Photographic Expert Group - подразделение в рамках ISO - Международной организации по стандартизации.
Алгоритм JPEG в наибольшей степени пригоден для сжатия фотографий и картин, содержащих реалистичные сцены с плавными переходами яркости и цвета. Наибольшее распространение JPEG получил в цифровой фотографии и для хранения и передачи изображений с использованием сети Интернет.
Характеристики алгоритма JPEG:
Степень сжатия: 2-200 (Задается пользователем).
Класс изображений: Полноцветные 24 битные изображения или изображения в градациях серого без резких переходов цветов (фотографии).
Характерные особенности: В некоторых случаях, алгоритм создает ореол вокруг резких горизонтальных и вертикальных границ в изображении (эффект Гиббса). Кроме того, при высокой степени сжатия изображение распадается на блоки 8x8 пикселов.
CCITT Consultative Committee International Telegraph and Telephone
Последовательности подряд идущих черных и белых точек в нем заменяются числом, равным их количеству. Каждая строка сжимается независимо, если строка начинается с черной точки, то считаем, что она начинается белой серией длиной 0. Например, последовательность длин серий 0, 3, 556, 10,.. означает, что в строке идут сначала 3 черных, 556 белых, 10 черных точек и т.д. А этот ряд, уже в свою очередь, сжимается по Хаффману с фиксированной таблицей.
Коэффициенты компрессии: лучший коэффициент стремится в пределе к 213.(3), средний 2, в худшем случае увеличивает файл в 5 раз. Класс изображений: Двуцветные черно-белые изображения, в которых преобладают большие пространства, заполненные белым цветом. Характерные особенности: Данный алгоритм чрезвычайно прост в реализации, быстр и может быть легко реализован аппаратно.

 44. Методы сжатия звуковой информации. Области применения различных методов.
* Выделяют три группы звуковых форматов файлов:
* ·         аудиоформаты без сжатия, такие как WAV, AIFF
* ·         аудиоформаты со сжатием без потерь (APE, FLAC)
* ·         аудиоформаты, с применением сжатия с потерями (mp3, ogg)
* Звуковой компакт диск (CDDA,англ Compact Disc Digital Audio, также называемый англ. Audio CD и Red Book) - международный стандарт хранения оцифрованного звука на компакт-дисках, представленный фирмами Philips и Sony.
* Звуковая информация представлена в импульсно-кодовой модуляции с частотой дискретизации 44,1 кГц и битрейтом 1411,2 кбит/с, 16 бит стерео.
* Название Red Book (Красная книга) связано с вхождением стандарта в набор стандартов форматов компакт-дисков, известных как Rainbow Books  (Радужные книги). Первая редакция стандарта издана в июне 1980 года компаниями Philips и Sony, затем доработана организацией Digital Audio Disc Committee и ратифицирована как стандарт IEC 908.
* ·         Максимальное время всех записей составляет 79,8 минут
* ·         Минимальное время звуковой дорожки - 4 секунды (включая 2-секундную паузу)
* ·         Максимальное количество звуковых дорожек - 99
* Waveform Audio File Format (WAVE, WAV, от англ. waveform - в форме волны) - формат файла-контейнера для хранения записи оцифрованного аудиопотока. Этот контейнер как правило используется для хранения несжатого звука в импульсно-кодовой модуляции. Однако контейнер не налагает каких-либо ограничений на используемый алгоритм кодирования.
* Медиаконтейнер, мультимедиаконтейнер  - формат файла или потоковый формат (поток необязательно должен быть сохранён в виде файла), чьи спецификации определяют только способ сохранения данных (а не алгоритм кодирования) в пределах одного файла.
* MP3 -  это кодек третьего уровня, разработанный командой MPEG, лицензируемый формат файла для хранения аудиоинформации.
* MP3-файлы могут создаваться с высоким или низким битрейтом, который влияет на качество файла-результата. Принцип сжатия заключается в снижении точности некоторых частей звукового потока, что практически неразличимо для слуха большинства людей. Данный метод называют кодированием восприятия.
* Так как формат MP3 поддерживает двухканальное кодирование (стерео), существует 4 режима:
* Стерео - двухканальное кодирование, при котором каналы исходного стереосигнала кодируются независимо друг от друга, но распределение бит между каналами в общем битрейте может варьироваться в зависимости от сложности сигнала в каждом канале.
* Моно - одноканальное кодирование. Если закодировать двухканальный материал этим способом, различия между каналами будут полностью стёрты, так как два канала смешиваются в один, он кодируется и он же воспроизводится в обоих каналах стереосистемы.
* Двухканальное стерео (англ. Dual Channel) - два независимых канала, например звуковое сопровождение на разных языках. Битрейт делится на два канала.
* Объединённое стерео (англ. Joint Stereo, M/S Stereo) -  Например, в одном из режимов Объединённое стерео левый и правый каналы преобразуются в их сумму (L+R) и разность (L-R). Для большинства звуковых файлов насыщенность канала с разностью (L-R) получается намного меньше канала с суммой (L+R).
* MP3-файл состоит из нескольких фрагментов (фреймов) MP3, которые, в свою очередь, состоят из заголовка и блока данных. Такая последовательность фрагментов называется элементарным потоком. Фрагменты не являются независимыми элементами и поэтому не могут быть извлечены произвольно. Блок данных MP3-файла содержит сжатую аудио информацию в виде частот и амплитуд.
* MP3 файлы имеют метаданные.
* Теги (tag - ярлык, метка, бирка) - метки в границах MP3-файла (в начале и/или в конце). В них может быть записана информация об авторстве, альбоме, годе выпуска и прочая информация о треке. В более поздних версиях тегов возможно хранение обложек альбомов и текстов песен. Существуют различные версии тегов.
* Dolby Digital - система цифрового многоканального звука для кинематографа, разработанная фирмой Dolby Laboratories, Inc. в 1991 году.
* Современные системы Dolby Digital предоставляют шесть каналов объёмного цифрового звука. Левый, центральный и правый фронтальные каналы позволяют определить позицию источника звука на экране. Отдельные разделённые левый и правый задние боковые каналы усиливают ощущение присутствия, создавая объём. А дополнительный низкочастотный канал добавляет накал действию на экране.
* Advanced Audio Coding (AAC) -запатентованный формат аудиофайла с меньшей потерей качества при кодировании, чем MP3 при одинаковых размерах.
* ААС+ - кодек, ориентированный на низкий битрейт. Достигает хорошего звучания уже на битрейтах от 32 до 48 кбит/с. Разработан для вещания онлайн радио и хранения аудиофайлов в мобильных устройствах. Cовместим с многоканальностью и предлагает широкий диапазон частот дискретизации. Не используется для высоких битрейтов.
* Принцип работы:
* 1.           Удаляются невоспринимаемые составляющие сигнала.
* 2.           Удаляется избыточность в кодированном аудио сигнале.
* 3.           Затем сигнал обрабатывается по методу МДКП согласно его сложности.
* 4.           Добавляются коды коррекции внутренних ошибок.
* 5.           Сигнал сохраняется или передаётся.
* Windows Media Audio  - лицензируемый формат, разработанный компанией Microsoft для хранения и трансляции аудиоинформации.
* Имеет низкую стойкость к ошибкам. Если при кодировании/передаче файла WMA некоторая часть его повреждается, то воспроизведение файла становится невозможным, как после места повреждения, так и за несколько десятков секунд до него.

45. Понятие виртуальной и дополненной реальности. Средства реализации.
Дополненная реальность накладывает вспомогательные объекты на наше окружение. Виртуальная реальность создаёт своё окружение, не взаимодействуя с внешним миром.
Особенности реализации виртуальной реальности: окружающие пользователя объекты должны быть трехмерными изображениями и восприниматься пользователем в натуральную величину, необходимо отслеживать движений пользователя и соответенно проводиться корректировка изображения.
Для реализации виртуальной реальности используются: обычный ПК для создания, шлем, имеющие два дисплея (для каждого глаза своя картинка), системы слежения (виртуальный костюм, или просто датчики движения), устройства ввода (джойстик, специальные перчатки итд). Идеальная система виртуальной реальности должна воздействать на все пять имеющихся у человека органов чувств. Поэтому еще могут использоваться многоканальная акустическая система (позволяющая ориентироваться в пространстве), 
Технология дополненной реальности позволяет с помощью устройств захвата изображения в реальном времени распознавать специальные метки (маркеры), а также их положение в пространстве, с последующим внедрением мнимых объектов в реальное пространство.

46. Компьютерная графика. Различные методы и технологии реализации.
Компьютерная графика - используется для создания (синтеза) и редактирования изображений, и для оцифровки визуальной информации, полученной из реального мира с целью дальнейшей её обработки и хранения. К методам компьютерной графики относят методы преобразования графических объектов (перенос из одной точки в другую), представления (развертки) линий в растровой форме (растрирование должно быть не заметным), выделения окна (выводится некоторая часть изображения на дисплей), удаления скрытых линий, проецирования, закраски изображений. Сейчас для реализации сложной компьютерной графики используется например библиотека OpenGL, представляющая собой программный интерфейс к графическому аппаратному обеспечению. Разработана Silicon Graphics, Inc. (SGI). Бесплатно распространяемая, процедурная, написана на С, но могут работать с ней и С++ программисты и Python-программисты. Существует огромное количество библиотек, использующие в качестве базиса эту библиотеку.
Библиотека  DirectX разработана Microsoft, используется в игровых и мультимедийных приложения. Работает только под Windows.

47. Системы управления базами данных, разновидности.
Система управления базами данных (СУБД) - совокупность программных и лингвистических средств общего или специального назначения, обеспечивающих управление созданием и использованием баз данных.
Основные функции СУБД
·      управление данными во внешней памяти (на дисках);
·      данными в оперативной памяти с использованием дискового кэша;
·            журнализация изменений, резервное копирование и восстановление базы данных после сбоев;
·         поддержка языков БД (язык определения данных, язык манипулирования данными).
Состав СУБД
Обычно современная СУБД содержит следующие компоненты:
* ядро, которое отвечает за управление данными во внешней и оперативной памяти и журнализацию,
* процессор языка базы данных, обеспечивающий оптимизацию запросов на извлечение и изменение данных и создание, как правило, машинно-независимого исполняемого внутреннего кода,
* подсистему поддержки времени исполнения, которая интерпретирует программы манипуляции данными, создающие пользовательский интерфейс с СУБД
* а также сервисные программы (внешние утилиты), обеспечивающие ряд дополнительных возможностей по обслуживанию информационной системы.
Классификации СУБД
По модели данных
Примеры:
·         Иерархические
·         Сетевые
·         Реляционные
·         Объектно-ориентированные
·         Объектно-реляционные
По степени распределённости
·         Локальные СУБД (все части локальной СУБД размещаются на одном компьютере)
·         Распределённые СУБД (части СУБД могут размещаться на двух и более компьютерах).
По способу доступа к БД
·         Файл-серверные
В файл-серверных СУБД файлы данных располагаются централизованно на файл-сервере. СУБД располагается на каждом клиентском компьютере (рабочей станции). Доступ СУБД к данным осуществляется через локальную сеть. Синхронизация чтений и обновлений осуществляется посредством файловых блокировок. Преимуществом этой архитектуры является низкая нагрузка на процессор файлового сервера. Недостатки: потенциально высокая загрузка локальной сети; затруднённость или невозможность централизованного управления; затруднённость или невозможность обеспечения таких важных характеристик как высокая надёжность, высокая доступность и высокая безопасность. Применяются чаще всего в локальных приложениях, которые используют функции управления БД; в системах с низкой интенсивностью обработки данных и низкими пиковыми нагрузками на БД.
На данный момент файл-серверная технология считается устаревшей, а её использование в крупных информационных системах - недостатком[2].
Примеры: Microsoft Access, Paradox, dBase, FoxPro, Visual FoxPro.
·         Клиент-серверные
Клиент-серверная СУБД располагается на сервере вместе с БД и осуществляет доступ к БД непосредственно, в монопольном режиме. Все клиентские запросы на обработку данных обрабатываются клиент-серверной СУБД централизованно. Недостаток клиент-серверных СУБД состоит в повышенных требованиях к серверу. Достоинства: потенциально более низкая загрузка локальной сети; удобство централизованного управления; удобство обеспечения таких важных характеристик как высокая надёжность, высокая доступность и высокая безопасность.
Примеры: Oracle, Firebird, Interbase, IBM DB2, Informix, MS SQL Server, Sybase Adaptive Server Enterprise, PostgreSQL, MySQL, Cach, ЛИНТЕР.
·         Встраиваемые
Встраиваемая СУБД - СУБД, которая может поставляться как составная часть некоторого программного продукта, не требуя процедуры самостоятельной установки. Встраиваемая СУБД предназначена для локального хранения данных своего приложения и не рассчитана на коллективное использование в сети. Физически встраиваемая СУБД чаще всего реализована в виде подключаемой библиотеки. Доступ к данным со стороны приложения может происходить через SQL либо через специальные программные интерфейсы.
Примеры: OpenEdge, SQLite, BerkeleyDB, Firebird Embedded, Microsoft SQL Server Compact, ЛИНТЕР.
 
48. Принципы построения реляционных баз данных. Нормализация данных.
Реляционная модель данных (РМД) - логическая модель данных, прикладная теория построения баз данных, которая является приложением к задачам обработки данных таких разделов математики как теории множеств и логика первого порядка.
Реляционная модель данных включает следующие компоненты:
·         Структурный аспект (составляющая) - данные в базе данных представляют собой набор отношений.
·         Аспект (составляющая) целостности - отношения (таблицы) отвечают определенным условиям целостности. РМД поддерживает декларативные ограничения целостности уровня домена (типа данных), уровня отношения и уровня базы данных.
·         Аспект (составляющая) обработки (манипулирования) - РМД поддерживает операторы манипулирования отношениями (реляционная алгебра, реляционное исчисление).
Термин реляционный означает, что теория основана на математическом понятии отношение (relation). В качестве неформального синонима термину отношение часто встречается слово таблица.
Для лучшего понимания РМД следует отметить три важных обстоятельства:
·         модель является логической, то есть отношения являются логическими (абстрактными), а не физическими (хранимыми) структурами;
·         для реляционных баз данных верен информационный принцип: всё информационное наполнение базы данных представлено одним и только одним способом, а именно - явным заданием значений атрибутов в кортежах отношений; в частности, нет никаких указателей (адресов), связывающих одно значение с другим;
·         наличие реляционной алгебры позволяет реализовать декларативное программирование и декларативное описание ограничений целостности, в дополнение к навигационному (процедурному) программированию и процедурной проверке условий.
Принципы реляционной модели были сформулированы в 1969-1970 годах Э. Ф. Коддом (E. F. Codd).
Нормальная форма - свойство отношения в реляционной модели данных, характеризующее его с точки зрения избыточности, потенциально приводящей к логически ошибочным результатам выборки или изменения данных. Нормальная форма определяется как совокупность требований, которым должно удовлетворять отношение.
Процесс преобразования отношений базы данных к виду, отвечающему нормальным формам, называется нормализацией. Нормализация предназначена для приведения структуры БД к виду, обеспечивающему минимальную логическую избыточность, и не имеет целью уменьшение или увеличение производительности работы или же уменьшение или увеличение физического объёма базы данных. Конечной целью нормализации является уменьшение потенциальной противоречивости хранимой в базе данных информации. Как отмечает К. Дейт, общее назначение процесса нормализации заключается в следующем:
·         исключение некоторых типов избыточности;
·         устранение некоторых аномалий обновления;
·         разработка проекта базы данных, который является достаточно качественным представлением реального мира, интуитивно понятен и может служить хорошей основой для последующего расширения;
·         упрощение процедуры применения необходимых ограничений целостности.
Устранение избыточности производится, как правило, за счёт декомпозиции отношений таким образом, чтобы в каждом отношении хранились только первичные факты (то есть факты, не выводимые из других хранимых фактов).
Первая нормальная форма (1NF)
Переменная отношения находится в первой нормальной форме (1НФ) тогда и только тогда, когда в любом допустимом значении отношения каждый его кортеж содержит только одно значение для каждого из атрибутов.
В реляционной модели отношение всегда находится в первой нормальной форме по определению понятия отношение. Что же касается различных таблиц, то они могут не быть правильными представлениями отношений и, соответственно, могут не находиться в 1НФ.
Вторая нормальная форма (2NF)
Переменная отношения находится во второй нормальной форме тогда и только тогда, когда она находится в первой нормальной форме и каждый неключевой атрибут неприводимо (функционально полно) зависит от её потенциального ключа.
Третья нормальная форма (3NF)
Переменная отношения находится в третьей нормальной форме тогда и только тогда, когда она находится во второй нормальной форме, и отсутствуют транзитивные функциональные зависимости неключевых атрибутов от ключевых.
Нормальная форма Бойса - Кодда (BCNF)
Переменная отношения находится в нормальной форме Бойса - Кодда (иначе - в усиленной третьей нормальной форме) тогда и только тогда, когда каждая её нетривиальная и неприводимая слева функциональная зависимость имеет в качестве своего детерминанта некоторый потенциальный ключ.
Четвёртая нормальная форма (4NF)
Переменная отношения находится в четвёртой нормальной форме, если она находится в нормальной форме Бойса - Кодда и не содержит нетривиальных многозначных зависимостей.
Пятая нормальная форма (5NF)
Переменная отношения находится в пятой нормальной форме (иначе - в проекционно-соединительной нормальной форме) тогда и только тогда, когда каждая нетривиальная зависимость соединения в ней определяется потенциальным ключом (ключами) этого отношения.
Доменно-ключевая нормальная форма (DKNF)
Переменная отношения находится в ДКНФ тогда и только тогда, когда каждое наложенное на неё ограничение является логическим следствием ограничений доменов и ограничений ключей, наложенных на данную переменную отношения.
Шестая нормальная форма (6NF)
Переменная отношения находится в шестой нормальной форме тогда и только тогда, когда она удовлетворяет всем нетривиальным зависимостям соединения. Из определения следует, что переменная находится в 6НФ тогда и только тогда, когда она неприводима, то есть не может быть подвергнута дальнейшей декомпозиции без потерь. Каждая переменная отношения, которая находится в 6НФ, также находится и в 5НФ.


 49. Распределенные базы данных. Принципы построения и решаемые задачи.
Под распределенной базой данных (РБД) понимается набор логически связанных между собой разделяемых данных, которые физически распределены по разных узлам компьютерной сети.
 
СУРБД - это программный комплекс (СУБД), предназначенный для управления РБД и позволяющий сделать распределенность прозрачной для конечного пользователя. Прозрачность РБД заключается в том, что с точки зрения конечного пользователя она должна вести себя точно также, как централизованная. Логически единая БД разделяется на фрагменты, каждый из которых хранится на одном компьютере, а все компьютеры соединены линиями связи. Каждый из этих фрагментов работает под управлением своей СУБД.
 
Критерии распределенности (по К. Дейту)
 
1.     Локальная автономность. Локальные данные принадлежат локальным узлам и управляется администраторами локальных БД. Локальные процессы в РБД остаются локальными. Все процессы на локальном узле контролируются только этим узлом.
2.     Отсутствие опоры на центральный узел. В системе не должно быть узла, без которого система не может функционировать, т.е. не должно быть центральных служб.
3.     Непрерывное функционирование. Удаление или добавление узла не должно требовать остановки системы в целом.
4.     Независимость от местоположения. Пользователь должен получать доступ к любым данным в системе, независимо от того, являются эти данные локальными или удалёнными.
5.     Независимость от фрагментации. Доступ к данным не должен зависеть от наличия или отсутствия фрагментации и от типа фрагментации.
6.     Независимость от репликации. Доступ к данным не должен зависеть от наличия или отсутствия реплик данных.
7.     Обработка распределенных запросов. Система должна автоматически определять методы выполнения соединения (объединения) данных.
8.     Обработка распределенных транзакций. Протокол обработки распределённой транзакции должен обеспечивать выполнение четырёх основных свойств транзакции: атомарность, согласованность, изолированность и продолжительность.
9.     Независимость от типа оборудования. СУРБД должна функционировать на оборудовании с различными вычислительными платформами.
10.  Независимость от операционной системы. СУРБД должна функционировать под управлением различных ОС.
11.  Независимость от сетевой архитектуры. СУРБД должна быть способной функционировать в сетях с различной архитектурой и типами носителя.
12.   Независимость от типа СУБД. СУРБД должна быть способной функционировать поверх различных локальных СУБД, возможно, с различными моделями данных (требование гетерогенности).
Функции СУРБД Основные функции - те же, что и у СУБД:
1.     управление данными во внешней памяти (на дисках);
2.     управление данными в оперативной памяти с использованием дискового кэша;
3.     журнализация изменений, резервное копирование и восстановление базы данных после сбоев;
4.     поддержка языков БД (язык определения данных, язык манипулирования данными).
 
 
Дополнительные функции:
1.     Расширенные службы установки соединений для передачи данных между узлами сети.
2.     Расширенные средства ведения каталога, позволяющие сохранить сведения о распределении объектов БД в сети.
3.     Средства обработки распределенных запросов, включающие механизмы оптимизации и организации удаленного доступа.
4.     Функции, поддерживающие целостность реплицируемых данных.
5.     Расширенные функции восстановления, учитывающие возможности отказов в других узлах сети или линиях связи.


50. Понятие открытой вычислительной системы. Классификация. Принципы построения.
Вычислительная система, отвечающая стандартам OSI (Open Systems Interconnection). Основными требованиями к построению открытых систем ("принципами OSI") являются:
 - переносимость, позволяющая легко переносить данные и программное обеспечение между различными платформами;
 - взаимодействие, обеспечивающее совместную работу устройств разных производителей;
 - масштабируемость, признак, гарантирующий сохранение инвестиций в информацию и программное обеспечение при переходе на более мощную аппаратную платформу.
Применительно к сетевым технологиям модель OSI предполагает обеспечение совместимости работающего оборудования и процессов по семи уровням:
1) Физическому,
2) Канальному,
3) Сетевому,
4) Транспортному,
5) Сеансовому,
6) Представительскому
7) Прикладному.
2. Вычислительная система, обеспечивающая свободный доступ пользователей к своим ресурсам.
3. Вычислительная система, способная видоизменяться.
Термины, связанные с открытыми системами:
 - OSI (Open System Interconnection) - "Взаимодействие открытых систем": система международных стандартов для вычислительных сетей и содержащих общие принципы взаимодействия вычислительных средств разных производителей;
 - закрытая система - автоматизированная система, не отвечающая признакам открытых систем;
 - гибкая система - система, которая может быть относительно легко и быстро перенастроена на новый состав решаемых задач.
 - развивающаяся (расширяющаяся) система -автоматизированная система, ориентированная на введение в ее состав новых программных, технических, лингвистических, информационных и др. средств для расширения ее возможностей (в том числе - круга решаемых задач, видов услуг и т. п.);
 - самообучающаяся система - автоматизированная система, обладающая способностью улучшать свое функционирование на основе накопления данных о предшествующей работе;
 - самоорганизующаяся система - автоматизированная система, обладающая способностью расширять имеющуюся информацию и совершенствовать свою структуру на основе предъявляемых ей данных.
По другим признакам различают также следующие виды систем:
 - сложная (большая) система - автоматизированная система, представляющая собой совокупность значительного числа подсистем, взаимосвязанных и объединенных общими целями функционирования. Характеризуется наличием следующих отличительных признаков: широко развитая структура, многоцелевой характер, сложный алгоритм управления, высокий уровень автоматизации, большой состав персонала и/или пользователей, значительные периоды времени создания и жизни системы;
 - замкнутая система
1. автоматизированная система, не допускающая расширений;
2. система с обратной связью;
 - защищенная система:
1) автоматизированная система, которая с целью ограничения доступа к своим техническим, программным и/или информационным средствам, требует ввода пароля;
2) система, снабженная средствами защиты данных от несанкционированного доступа, в том числе использования, разрушения и/или искажения;
 - восстанавливаемая система  - вычислительная система, допускающая возврат к нормальной работе после ее сбоя или отказа;
 - система восстановления (данных) - комплекс программных средств, предназначенный для поддержания целостности данных; используется в банках данных и других автоматизированных системах;
 - прикладная система  - вычислительная система, предназначенная для решения определенной задачи, класса задач или для предоставления пользователям определенных видов услуг;
 - специализированная система  - вычислительная система, предназначенная для решения узкого класса задач;
 - типовая автоматизированная система -автоматизированная система, в которой используются типовые для данного или определенного класса систем технические, программные и др. средства;
 - универсальная автоматизированная система - автоматизированная система, обеспечивающая решение разнородных задач - вычислительных, информационных, управленческих, моделирования и т. п.;
 - система реального времени - автоматизированная система, работающая в режиме реального времени, который характеризуется тем, что скорость выполнения полного цикла внутрисистемных процессов и oпераций выше скорости процессов, протекающих во внешней среде, с которой система взаимодействует;
 - система управления - совокупность аппаратных (технических) и программных средств, предназначенных для поддержания или улучшения работы объекта управления;
 - диалоговая (интерактивная, онлайновая) система -автоматизированная человеко-машинная система (см. ранее), работающая в режиме диалога, при котором она отвечает на каждую команду пользователя и обращается за информацией к нему по мере надобности;
 - резервная система - вычислительная система, которая принимает на себя управление в случае нарушения работы основной системы; является частью системы с дублированием;
 - система, сдаваемая "под ключ" - вычислительная система, для работы с которой пользователю требуется только включить компьютер. При этом пользователь получает доступ к прикладному программному обеспечению. Такие системы реализуются, в частности, на домашних ПЭВМ;
 - человеко-машинная система, система "человек-машина" - любая система, включающая человека (оператора) и техническое устройство, с которым он взаимодействует.


51. Методы анализа информационных систем.
Структурный метод
Основным строительным блоком является процедура или функция. Внимание уделяется, прежде всего, вопросам передачи управления и декомпозиции больших алгоритмов на меньшие. Но, к сожалению, системы не слишком легко адаптируются. При изменении требований или увеличении размера приложения (что происходит нередко) сопровождать их становится сложнее.
Однако структурный метод является чрезвычайно удобным на этапе анализа и проектирования - поскольку аналитики имеют дело с бизнес-процессами, по сути, являющимися функциями или группами функций.
В структурном анализе используются такие методики, как:
* DFD (Data Flow Diagrams) - диаграммы потоков данных;
* IDEF0 (Icam DEFinition) - функциональные диаграммы.


Объектно-ориентированный метод
Является наиболее современным методом разработки программного обеспечения. Здесь в качестве основного строительного блока выступает объект или класс. В самом общем смысле объект - это сущность, обычно извлекаемая из словаря предметной области или решения, а класс является описанием множества однотипных объектов. Каждый объект обладает идентичностью (его можно поименовать или как-то по-другому отличить от прочих объектов), состоянием (обычно с объектом бывают связаны некоторые данные) и поведением (с ним можно что-то делать или он сам может что-то делать с другими объектами).
Объектно-ориентированный метод разработки программного обеспечения является преобладающим сейчас по той причине, что он продемонстрировал свою полезность при построении систем в самых разных предметных областях и для различных уровней сложности и масштаба. Кроме того, большинство современных языков программирования, инструментальных средств и операционных систем являются в той или иной мере объектно-ориентированными, а это дает веские основания судить о мире в терминах объектов.

52. Средства мониторинга сетевого трафика.
Существует несколько видов средств мониторинга:
1. Системы управления сетью
2. Средства управления системой
3. Встроенные системы диагностики и управления
4. Анализаторы протоколов
Системы управления сетью - централизованные программные системы, которые собирают данные о состоянии узлов и коммуникационных устройств сети, а также данные о трафике, циркулирующем в сети. Эти системы не только осуществляют мониторинг и анализ сети, но и выполняют в автоматическом или полуавтоматическом режиме действия по управлению сетью. Примеры: HPOpenView, SunNetManager, IBMNetView.
Средства управления системой. Средства управления системой часто выполняют функции, аналогичные функциям систем управления, но по отношению к другим объектам. В первом случае объектом управления является программное и аппаратное обеспечение компьютеров сети, а во втором - коммуникационное оборудование. Вместе с тем, некоторые функции этих двух видов систем управления могут дублироваться, например, средства управления системой могут выполнять простейший анализ сетевого трафика.
Встроенные системы диагностики и управления. Эти системы выполняются в виде программно-аппаратных модулей, устанавливаемых в коммуникационное оборудование, а также в виде программных модулей, встроенных в операционные системы. Они выполняют функции диагностики и управления только одним устройством, и в этом их основное отличие от централизованных систем управления. Пример: Distrebuted 5000.
Анализаторы протоколов. Представляют собой программные или аппаратно-программные системы, которые ограничиваются в отличие от систем управления лишь функциями мониторинга и анализа трафика в сетях. Пример: Wireshark.
53. Метод Монте-Карло. Принципы построения моделей для анализа эффективности информационных систем (основа построения, достоинства и недостатки)
Метод Монте-Карло - это метод решения различных задач с помощью генерации случайных последовательностей. 
Сущность метода Монте-Карло состоит в следующем: требуется найти значение а некоторой изучаемой величины. Для этого выбирают такую случайную величину Х, математическое ожидание которой равно: М(Х)=а.
Практически же поступают так: производят n испытаний, в результате которых получают n возможных значений Х; вычисляют их среднее арифметическое   и принимают x в качестве оценки (приближённого значения) a* искомого числа a: 
Алгоритм метода Монте-Карло включает следующие этапы:
1. установление взаимосвязи между исходными и выходными показателями в виде математического уравнения или неравенства;
2. задание законов распределения вероятностей для ключевых параметров модели;
3. проведение компьютерной имитации значений ключевых параметров модели. 
4. расчет основных характеристик распределений исходных и выходных показателей; 
5. проведение анализа полученных результатов (графический и количественный) и принятие решения. 
(+):
* Не требует никаких предложений о регулярности, за исключением квадратичной интегрируемости. Это может быть полезным, так как часто очень сложная функция, имеет свойства регулярности, которые трудно установить.
* Легко применять без достаточного анализа задачи. 


(-):
* Много рутинной работы;
* В связи с наличием большого количества связей решение получается неустойчивым;
* Статическая погрешность убывает медленно.
* Необходимость иметь случайные числа


54. Методы управления сетью: коммутация каналов, коммутация пакетов.
При коммутации каналов коммутационная сеть образует между конечными узлами непрерывный составной физический канал из последовательно соединенных коммутаторами промежуточных канальных участков. Условием того, что несколько физических каналов при последовательном соединении образуют единый физический канал, является равенство скоростей передачи данных в каждом из составляющих физических каналов. Равенство скоростей означает, что коммутаторы такой сети не должны буферизовать передаваемые данные. 
В сети с коммутацией каналов перед передачей данных всегда необходимо выполнить процедуру установления соединения, в процессе которой и создается составной канал. И только после этого можно начинать передавать данные.
(+):
* Постоянная и известная скорость передачи данных по установленному между конечными узлами каналу. 
* Низкий и постоянный уровень задержки передачи данных через сеть. 
(-):
* Отказ сети в обслуживании запроса на установление соединения. Такая ситуация может сложиться из-за того, что на некотором участке сети соединение нужно установить вдоль канала, через который уже проходит максимально возможное количество информационных потоков. 
* Нерациональное использование пропускной способности физических каналов из-за невозможности динамического перераспределения пропускной способности. Это представляет собой принципиальное ограничение сети с коммутацией каналов, так как единицей коммутации здесь является информационный поток в целом.
* Обязательная задержка перед передачей данных из-за фазы установления соединения.


При коммутации пакетов все передаваемые пользователем сообщения разбиваются в исходном узле на сравнительно небольшие части, называемые пакетами.
Сообщения могут иметь произвольную длину, от нескольких байт до многих мегабайт. Напротив, пакеты обычно тоже могут иметь переменную длину, но в узких пределах, например от 46 до 1500 байт. Каждый пакет снабжается заголовком, в котором указывается адресная информация, необходимая для доставки пакета на узел назначения, а также номер пакета, который будет использоваться узлом назначения для сборки. 
(+):
* Высокая общая пропускная способность сети при передаче пульсирующего трафика.
* Возможность динамически перераспределять пропускную способность физических каналов связи между абонентами в соответствии с реальными потребностями их трафика.
(-):
* Неопределенность скорости передачи данных между абонентами сети, обусловленная тем, что задержки в очередях буферов коммутаторов сети зависят от общей загрузки сети.
* Переменная величина задержки пакетов данных, которая может быть достаточно продолжительной в моменты мгновенных перегрузок сети.
* Возможные потери данных из-за переполнения буферов.


В настоящее время активно разрабатываются и внедряются методы, позволяющие преодолеть указанные недостатки, которые особенно остро проявляются для чувствительного к задержкам трафика, требующего при этом постоянной скорости передачи. Такие методы называются методами обеспечения качества обслуживания (Quality of Service, QoS).


55. Методы балансировки трафика.
При создании любого интернет-проекта необходимо проанализировать возможность падения сервера. Для решения проблемы падения сервера используют методы балансировки трафика.
Процедура балансировки осуществляется при помощи целого комплекса алгоритмов и методов, соответствующим следующим уровням модели OSI:
* сетевому;
* транспортному;
* прикладному.


Балансировка на сетевом уровне
Нужно сделать так, чтобы за один конкретный IP-адрес сервера отвечали разные физические машины. Такая балансировка может осуществляться с помощью множества разнообразных способов:
* DNS-балансировка. На одно доменное имя выделяется несколько IP-адресов. Сервер, на который будет направлен клиентский запрос, определяется с помощью алгоритма Round Robin.
* Построение NLB-кластера. При использовании этого способа серверы объединяются в кластер, состоящий из входных и вычислительных узлов. Распределение нагрузки осуществляется при помощи специального алгоритма. Используется в Microsoft.
* Балансировка по IP с использованием дополнительного маршрутизатора.
* Балансировка по территориальному признаку осуществляется путём размещения одинаковых сервисов с одинаковыми адресами в территориально различных регионах Интернета (так работает технология Anyсast DNS). 


Балансировка на транспортном уровне
Этот вид балансировки является самым простым: клиент обращается к балансировщику, тот перенаправляет запрос одному из серверов, который и будет его обрабатывать. 
Иногда балансировку на транспортном уровне сложно отличить от балансировки на сетевом уровне. 
Различие между уровнями балансировки можно объяснить следующим образом. К сетевому уровню относятся решения, которые не терминируют на себе пользовательские сессии. Они просто перенаправляют трафик и не работают в проксирующем режиме.
На сетевом уровне балансировщик просто решает, на какой сервер передавать пакеты. Сессию с клиентом осуществляет сервер.


Балансировка на прикладном уровне
При балансировке на прикладном уровне балансировщик работает в режиме умного прокси. Он анализирует клиентские запросы и перенаправляет их на разные серверы в зависимости от характера запрашиваемого контента. Так работает, например, веб-сервер Nginx, распределяя запросы между фронтендом и бэкендом.


Алгоритмы и методы балансировки
* справедливость: нужно гарантировать, чтобы на обработку каждого запроса выделялись системные ресурсы и не допустить возникновения ситуаций, когда один запрос обрабатывается, а все остальные ждут своей очереди;
* эффективность: все серверы, которые обрабатывают запросы, должны быть заняты на 100%; желательно не допускать ситуации, когда один из серверов простаивает в ожидании запросов на обработку (сразу же оговоримся, что в реальной практике эта цель достигается далеко не всегда);
* сокращение времени выполнения запроса: нужно обеспечить минимальное время между началом обработки запроса (или его постановкой в очередь на обработку) и его завершения;
* сокращение времени отклика: нужно минимизировать время ответа на запрос пользователя.


56. Семиуровневая модель OSI.
7 уровней: Физический, канальный, сетевой, транспортный, сеансовый, представительный, прикладной.
Физический уровень - 1-й уровень. Осуществляется передача данных побитно, к этому уровню имеет отношение характеристики среды (пропускная способность, способ кодирования, скорость передачи). Протоколы нам всем хорошо известны: Bluetooth, IRDA (Инфракрасная связь), медные провода (витая пара, телефонная линия), Wi-Fi, и т.д.
Канальный уровень - 2-й уровень
* Первая задача - Проверка доступности среды передачи данных;
* Вторая задача - доставка кадров между абонентами сети;
* Третья задача -  обнаружение и коррекция ошибок.
Определяется канальный уровень двумя подуровнями: LLC и MAC.
LLC - управление логическим каналом (Logical Link Control), создан для взаимодействия с верхним уровнем. MAC - управление доступом к передающей среде (Media Access Control), создан для взаимодействия с нижним уровнем.
Иерархия сегментов сети на канальном уровне:
1. Разделяемый подсегмент;
2. Разделяемый сегмент;
3. Коммутируемый сегмент;
Единица данных - кадр, классическое устройство - коммутатор, свич.
Сетевой уровень - 3-й уровень.
Служит для образования общей сети. На сетевом уровне отдельные коммутаторы объединяются в общую межсетевую среду. Единица передачи данных - пакет. Классическое устройство - маршрутизатор. На сетевом уровне адрес разделяется на адрес сети и адрес узла.
Задача сетевого уровня - это выбор наилучшего пути между узлами этот процесс называется маршрутизация. 
На сетевом определенны 2 типа протокола:
1. ip,ipx
2. маршрутизация osfp
Транспортный уровень - 4-й уровень сетевой модели OSI, предназначен для доставки данных. При этом не важно, какие данные передаются, откуда и куда, то есть, он предоставляет сам механизм передачи. Блоки данных он разделяет на фрагменты, размер которых зависят от протокола: короткие объединяет в один, а длинные разбивает. Протоколы этого уровня предназначены для взаимодействия типа точка-точка. Пример: TCP, UDP, SCTP.
Сеансовый уровень - 5-й уровень сетевой модели OSI, отвечает за поддержание сеанса связи, позволяя приложениям взаимодействовать между собой длительное время. Уровень управляет созданием/завершением сеанса, обменом информацией, синхронизацией задач, определением права на передачу данных и поддержанием сеанса в периоды неактивности приложений. Синхронизация передачи обеспечивается помещением в поток данных контрольных точек, начиная с которых возобновляется процесс при нарушении взаимодействия.
Уровень представления - 6-й уровень. Этот уровень отвечает за преобразование протоколов и кодирование/декодирование данных. Запросы приложений, полученные с уровня приложений, он преобразует в формат для передачи по сети, а полученные из сети данные преобразует в формат, понятный приложениям. На этом уровне может осуществляться сжатие/распаковка или кодирование/декодирование данных, а также перенаправление запросов другому сетевому ресурсу, если они не могут быть обработаны локально.
Протокол прикладного уровня - 7 уровень. Обеспечивает взаимодействие сети и пользователя. Уровень разрешает приложениям пользователя иметь доступ к сетевым службам, таким, как обработчик запросов к базам данных, доступ к файлам, пересылке электронной почты. Также отвечает за передачу служебной информации, предоставляет приложениям информацию об ошибках и формирует запросы к уровню представления. Пример: HTTP,POP3, SMTP.


57. Локальные вычислительные сети (топология, методы доступа).
Топология сети - конфигурация обхода графа, узлами которого являются сетевые узлы, а рёбрами - связи между ними.
Следует различать физическую и логическую топологию:
Физическая топология - связи между узлами определены посредством физических каналов связи.
Логическая топология - маршруты передачи данных между узлами поверх физических.
Последовательная шина (общая шина)
* Самая надёжная, самая дешёвая, самая простая и экономная (кабель).
* Неконфиденциальная, сложно найти отказ, невысокая производительность, Ограниченная длина кабеля и количество рабочих станций.
Звезда
Центральный узел - хаб, концентратор, повторитель.
(+):
* Расширяемость, Мониторинг, Легко искать отказы
(-):
* Отказ концентратора приводит к отключению от сети всех рабочих станций, подключенных к ней.
* Достаточно высокая стоимость реализации, т.к. требуется большое количество кабеля.
Иерархическая
* Легко масштабируемая система.
* Сложная и дорогая в исполнении.
Кольцо
 Эта топология представляет собой последовательное соединение компьютеров, когда последний соединён с первым. Сигнал проходит по кольцу от компьютера к компьютеру в одном направлении. Поскольку сигнал проходит через каждый компьютер, сбой одного из них приводит к нарушению работы всей сети.
Легко искать отказы, передатчик сообщения контролирует его получение.
Каждый с каждым (полносвязанная)
Немасшабируемая, дорогая.
Двойное кольцо
Отказоустойчивость. При отказе одного из участков кабеля, сигнал может идти по другому зарезервированному маршруту.
Смешанная топология
Например Token-ring. Преимущества сетей топологии Token Ring:
* топология обеспечивает равный доступ ко всем рабочим станциям;
* высокая надежность, так как сеть устойчива к неисправностям отдельных станций и к разрывам соединения отдельных станций.
Недостатки сетей топологии Token Ring: большой расход кабеля и соответственно дорогостоящая разводка линий связи.
Метод доступа - это способ определения того, какая из рабочих станций сможет следующей использовать ЛВС. То, как сеть управляет доступом к каналу связи (кабелю), существенно влияет на ее характеристики. Примерами методов доступа являются:
* множественный доступ с прослушиванием несущей и разрешением коллизий (Carrier Sense Multiple Access with Collision Detection - CSMA/CD);
* множественный доступ с передачей полномочия (Token Passing Multiple Access - TPMA) или метод с передачей маркера;
* множественный доступ с разделением во времени (Time Division Multiple Access - TDMA);
* множественный доступ с разделением частоты (Frequency Division Multiple Access - FDMA) или множественный доступ с разделением длины волны (Wavelength Division Multiple Access - WDMA).


58. Методы повышения достоверности при передаче информации.
На основе теории надежности и теории помехоустойчивого кодирования для повышения достоверности передачи информации находят применение следующие методы:
1) Регенерация формы сигналов в центрах коммутации сетей или в их промежуточных звеньях - ретрансляторах. Этот метод используется в системах передачи, имеющих длинные линии связи.
2) Многократная передача одного итого же блока данных по одному каналу и сравнение принятых блоков с помощью мажоритарных устройств (устройств, работающих по принципу голосования). 
3) Передача одного и того же блока данных одновременно по одному каналу на разных частотах и сравнение принятых блоков по мажоритарному принципу. В этом случае полоса частот, отводимая для передачи одного сообщения, увеличивается в несколько раз.
4) Передача одного и того же блока данных одновременно по одному аналоговому каналу несколькими гармоническими несущими одной частоты, но сдвинутыми по фазе относительно друг друга. Такой метод не требует расширения полосы частот в канале связи.
5) Использование в передаваемом блоке данных длиной n бит не всех возможных комбинаций N0 = 2n, а лишь некоторого их ограниченного числа разрешенных комбинаций. Несовпадение принятой комбинации с разрешенными означает искажение в принятом блоке данных.
6) Использование корректирующих кодов, заключающееся во введении в передаваемый блок данных дополнительных проверочных разрядов, которые позволяют обнаружить искажения. Контрольные биты формируются по алгоритмам.
7) Введение в структуру системы передачи обратного канала связи, который информирует отправителя об искажениях в переданном блоке данных или об их отсутствии. 

59. Понятие качества обслуживания в компьютерных сетях. Средства обеспечения качества обслуживания.
Трем критериям классификации приложений (предсказуемость скорости трафика, чувствительность к задержкам и чувствительность к потерям) соответствуют три группы параметров, используемых при определении и задании требуемого качества обслуживания:
* параметры пропускной способности. Средняя/максимальная скорость;
* параметры задержек - среднюю и максимальную величину задержек;
* параметры надежности передачи - % потерянных/искаженных пакетов.


Как средство обеспечения качества можно назвать службу QoS. После заключения соглашения пользователь и сервис-провайдер настраивают свои программные и аппаратные средства для соблюдения оговоренных параметров. 
Средства QoS узла в свою очередь могут включать компоненты двух типов:
* механизмы обслуживания очередей;
* механизмы кондиционирования трафика.


Механизмы обслуживания очередей являются необходимым элементом любого устройства, работающего по принципу коммутации пакетов. Когда скорость поступления трафика становится больше скорости его продвижения, возникают очереди. Как раз в такие периоды и нужны механизмы обслуживания очередей: варьируя выборкой пакетов, они влияют на время их нахождения в очереди, а значит, и на величину задержки - один из важнейших параметров качества обслуживания. По умолчанию в сетевых устройствах очереди обслуживаются по простейшему алгоритму FIFO ("первым пришел - первым обслужен"), что достаточно только для реализации сервиса "по мере возможности", для поддержки же "истинных" сервисов QoS нужны более сложные механизмы, обрабатывающие несколько классов потоков, например алгоритмы приоритетного или взвешенного обслуживания.
Механизмы кондиционирования трафика решают задачу создания условий для качественного обслуживания трафика другим способом - не за счет выбора оптимального алгоритма обслуживания очереди, а за счет ее сокращения. При этом сокращение очереди достигается путем воздействия на входной трафик: например, снижения скорости поступления потока в данный узел, уменьшения его неравномерности и т. п.

60. Назначение и принцип работы интернет сети.
Глобальные сети (Wide Area Network, WAN) - это сети, предназначенные для объединения отдельных компьютеров и локальных сетей, расположенных на значительном удалении.
Определение метасети, состоящие из многих сетей, которые работают согласно протоколам семейства TCP/IP, объединены через шлюзы и используют единое адресное пространство и пространство имен".


Инфраструктура Интернет:
* магистральный уровень (система связанных высокоскоростных телекоммуникационных серверов).
* уровень сетей и точек доступа (крупные телекоммуникационные сети), подключенных к магистрали.
* уровень региональных и других сетей.
* ISP - интернет-провайдеры.
* пользователи.


В основу архитектуры сетей положен многоуровневый принцип передачи сообщений. Формирование сообщения осуществляется на самом верхнем уровне модели ISO/OSI.. Затем (при передаче) оно последовательно проходит все уровни системы до самого нижнего, где и передается по каналу связи адресату. 
В территориальных сетях управление обменом данных осуществляется протоколами верхнего уровня модели ISO/OSI. Независимо от внутренней конструкции каждого конкретного протокола верхнего уровня для них характерно наличие общих функций: инициализация связи, передача и прием данных, завершение обмена. 
Наиболее распространенным протоколом управления обменом данных является протокол TCP/IP. Главное отличие сети Internet от других сетей заключается именно в ее протоколах TCP/IP, охватывающих целое семейство протоколов взаимодействия между компьютерами сети. TCP/IP - это технология межсетевого взаимодействия, технология Internet. Поэтому глобальная сеть, объединяющая множество сетей с технологией TCP/IP, называется Internet.

61. Основные протоколы сети Интернет, их назначение.
Протокол - это набор правил, которых должны придерживаться все компании, чтобы обеспечить совместимость производимого аппаратного и программного обеспечения.
Работа сети Internet основана на использовании семейств коммуникационных протоколов TCP/IP(Transmission Control Protocol/Internet Protocol). TCP/IP используется для передачи данных как в глобальной сети Internet, так и во многих локальных сетях.


Классификация:
* Транспортные протоколы - управляют передачей данных между двумя машинами:
   * TCP/IP (Transmission Control Protocol), UDP (User Datagram Protocol);
* Протоколы маршрутизации - обрабатывают адресацию данных, обеспечивают фактическую передачу данных и определяют наилучшие пути передвижения пакета:
   * IP (Internet Protocol), ICMP (Internet Control Message Protocol), RIP (Routing Information Protocol)
* Протоколы поддержки сетевого адреса - обрабатывают адресацию данных, обеспечивают идентификацию машины с уникальным номером и именем:
   * DNS (Domain Name System), ARP (Address Resolution Protocol)
* Протоколы прикладных сервисов - это программы, которые пользователь (или компьютер) использует для получения доступа к различным услугам:
   * FTP (File Transfer Protocol), TELNET, HTTP (HyperText Transfer Protocol)
* Шлюзовые протоколы помогают передавать по сети сообщения о маршругазации и информацию о состоянии сети, а также обрабатывать данные для локальных сетей:
   * EGP (Exterior Gateway Protocol), GGP (Gateway-to-Gateway Protocol), IGP (Interior Gateway Protocol); SMTP (Simple Mail Transfer Protocol), NFS (Network File System).

62. Понятие DNS. Структура доменных имен в сети Интернет.
 DNS (Domain Name System - система доменных имён) - компьютерная распределённая система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста.
Домен - узел в дереве имен.
Ресурсная запись - единица хранения и передачи информации в DNS.
Зона - часть дерева доменных имен.
Делегирование - операция передачи ответственности за часть дерева доменных имен другому лицу или организации.
DNS-сервер - специализированное ПО для обслуживания DNS, а также компьютер, на котором это ПО выполняется.

63. Понятие стека протоколов. Стек протоколов ТСР/IP, UDP/IP.
Согласованный набор протоколов разных уровней, достаточный для организации межсетевого взаимодействия, называется стеком протоколов. Для каждого уровня определяется набор функций-запросов для взаимодействия с вышележащим уровнем, который называется интерфейсом. Правила взаимодействия двух машин могут быть описаны в виде набора процедур для каждого из уровней, которые называются протоколами.
Стеки протоколов разбиваются на три уровня:
* сетевые;
* транспортные;
* прикладные.
 
Сетевые протоколы
Сетевые протоколы предоставляют следующие услуги: адресацию и маршрутизацию информации, проверку на наличие ошибок, запрос повторной передачи и установление правил взаимодействия в конкретной сетевой среде. Ниже приведены наиболее популярные сетевые протоколы.
* DDP (Datagram Delivery Protocol - Протокол доставки дейтаграмм). Протокол передачи данных Apple, используемый в Apple Talk.
* IP (Internet Protocol - Протокол Internet). Протокол стека TCP/IP, обеспечивающий адресную информацию и информацию о маршрутизации.
 
Транспортные протоколы
Транспортные протоколы предоставляют услуги надежной транспортировки данных между компьютерами. Ниже приведены наиболее популярные транспортные протоколы.
* TCP (Transmission Control Protocol - Протокол управления передачей). Протокол стека TCP/IP, отвечающий за надежную доставку данных.
 
Прикладные протоколы
Прикладные протоколы отвечают за взаимодействие приложений. Ниже приведены наиболее популярные прикладные протоколы.
* FTP (File Transfer Protocol - Протокол передачи файлов). Протокол стека TCP/IP, используемый для обеспечения услуг по передачи файлов.
* HTTP (Hyper Text Transfer Protocol) - протокол передачи гипертекста и другие протоколы.

64. Системы автоматизированного проектирования (САПР).
Система автоматизированного проектирования - автоматизированная система, реализующая информационную технологию выполнения функций проектирования, представляет собой организационно-техническую систему, предназначенную для автоматизации процесса проектирования, состоящую из персонала и комплекса технических, программных и других средств автоматизации его деятельности.


Принято выделять семь видов обеспечения САПР:
* техническое (ТО), включающее различные аппаратные средства (ЭВМ, периферийные устройства, сетевое коммутационное оборудование, линии связи, измерительные средства);
* математическое (МО), объединяющее математические методы, модели и алгоритмы для выполнения проектирования;
* программное (ПО), представляемое компьютерными программами САПР;
* информационное (ИО), состоящее из базы данных, СУБД, а также включающее другие данные, которые используются при проектировании; отметим, что вся совокупность используемых при проектировании данных называется информационным фондом САПР, база данных вместе с СУБД носит название банка данных;
* лингвистическое (ЛО), выражаемое языками общения между проектировщиками и ЭВМ, языками программирования и языками обмена данными между техническими средствами САПР;
* методическое (МетО), включающее различные методики проектирования; иногда к нему относят также математическое обеспечение;
* организационное (ОО), представляемое штатными расписаниями, должностными инструкциями и другими документами, которые регламентируют работу проектного предприятия.

65. Экспертные системы. Задачи и область применения.
Экспертная система (ЭС, англ. expert system) - компьютерная система, способная частично заменить специалиста-эксперта в разрешении проблемной ситуации.
В информатике экспертные системы рассматриваются совместно с базами знаний как модели поведения экспертов в определенной области знаний с использованием процедур логического вывода и принятия решений, а базы знаний - как совокупность фактов и правил логического вывода в выбранной предметной области деятельности. 
ЭС выдают советы, проводят анализ, выполняют классификацию, дают консультации и ставят диагноз. Они ориентированы на решение задач, обычно требующих проведения экспертизы человеком-специалистом. В отличие от машинных программ, использующий процедурный анализ, ЭС решают задачи в узкой предметной области (конкретной области экспертизы) на основе дедуктивных рассуждений. Такие системы часто оказываются способными найти решение задач, которые не структурированы и плохо определены. Они справляются с отсутствием структурированности путем привлечения эвристик, т. е. правил, взятых с потолка, что может быть полезным в тех системах, когда недостаток необходимых знаний или времени исключает возможность проведения полного анализа.
Главное достоинство ЭС- возможность накапливать знания, сохранять их длительное время, обновлять и тем самым обеспечивать относительную независимость конкретной организации от наличия в ней квалифицированных специалистов. Накопление знаний позволяет повышать квалификацию специалистов, работающих на предприятии, используя наилучшие, проверенные решения.
Практическое применение искусственного интеллекта на машиностроительных предприятиях и в экономике основано на  ЭС, позволяющих  повысить качество и сохранить время принятия решений, а также способствующих росту эффективности работы и повышению квалификации специалистов.


66. Автоматизированные системы обработки информации и управления. Понятие, сферы применении.
Автоматизированная система обработки информации и управления (АСОИУ) в общем смысле представляет собой некоторую систему обработки данных, основанную на использовании ЭВМ и связанную с управлением теми или иными объектами (предприятиями, организациями, технологическими процессами).
В случае предприятия и организации АСОИУ решает задачи обеспечения оптимального функционирования этих объектов и является системой организационного типа. В случае, когда объектом является технологический процесс, АСОИУ является системой управления технологическим процессом. Таким образом, АСОИУ(в дальнейшем система) представляет собой человеко-машинную систему, предназначенную для оптимизации управленческих решений в любой сфере экономики на базе средств вычислительной техники и математических методов.
Применительно к организационно-административным, производственным и технологическим объектам АСОИУ, согласно нормативным регламентам, является система человек-машина, обеспечивающая эффективное функционирование объекта, в которой сбор и переработка информации, необходимой для реализации функции управления этим объектом, осуществляется с применением средств автоматизации и вычислительной техники и средств связи.
АСОИУ предназначена для целенаправленного автоматизированного ведения производственных, организационно-административных и технологических процессов с выдачей достоверной технико-экономической и технологической информации.
Определение АСОИУ в форме, изложенной выше, указывает на наличие в ее составе:
1. современных автоматических средств сбора и обработки информации;
2. человека, как субъекта труда, принимающего содержательное решение в выработке решений по управлению;
3. реализации в системе процесса обработки организационно-административной, технологической и технико-экономической информации;
4. цели функционирования системы, заключающиеся в общем смысле в оптимизации работы объекта по заданному критерию управления.
Критерием управления является экономический, технический или технико-экономический показатель.

67. Теория массового обслуживания. Основные принципы. Применение в информатике (основные модели и критерии оценки эффективности).
Теория массового обслуживания - раздел теории вероятностей, целью исследований которого является рациональный выбор структуры системы обслуживания и процесса обслуживания на основе изучения потоков требований на обслуживание, поступающих в систему и выходящие из неё, длительности ожидания и длины очередей. В ТМО изучают системы массового обслуживания СМО.
В качестве основных элементов СМО следует выделить входной поток заявок, очередь на обслуживание, cистему (механизм) обслуживания и выходящий поток заявок. В роли заявок (требований, вызовов) могут выступать покупатели в магазине, телефонные вызовы, запросы к информационной системе и т.д.. Роль обслуживающих приборов (каналов, линий) играют продавцы или кассиры в магазине, каналы связи и т.д.
 
В зависимости от характеристик этих элементов СМО классифицируются следующим образом.
1. По характеру поступления заявок. Если интенсивность входного потока (количество заявок в единицу времени) постоянна или является заданной функцией от времени, поток называют регулярным. Если параметры потока независимы от конкретного момента времени, поток называют стационарным.
2. По количеству одновременно поступающих заявок. Поток с вероятностью одновременного появления двух и более заявок равной нулю называется ординарным.
3. По связи между заявками. Если вероятность появления очередной заявки не зависит от количества предшествующих заявок, имеем дело с потоком без последействия .
4. По однородности заявок выделяют однородные и неоднородные потоки.
5. По ограниченности потока заявок различают замкнутые и разомкнутые системы (система с ограниченной клиентурой называется замк-нутой). Так универсальный магазин является разомкнутой системой, тогда как оптовый магазин с постоянными клиентами - замкнутая система.


Рассмотрим стационарный поток однородных заявок без последействия. Пусть Pk(t) вероятность появления k заявок в интервале времени t. Эта вероятность зависит только от и не зависит от начала отсчета времени, от поступления заявок в предыдущих временных интервалах. Пусть к тому же поток является ординарным, т. е. Pk(dt) при  k>1 бесконечно мала в сравнении с малым интервалом dt. Если обозначить через число заявок в единицу времени (интенсивность потока), то можно показать, что для такого простейшего потока 
 
Формула (1) определяет распределение Пуассона. Для пуассоновского потока можно обнаружить, что промежутки времени T между поступлениями заявок распределены по экспоненциальному (показательному) закону  
 
(вероятность, что промежуток времени не превышает t).


Естественно, что входной поток может описываться не только пуассоновским, но и другими распределениями (Эрланга, гиперэкспоненциальным и т.п.).
Аналогичная ситуация имеет место и для выходного потока. Чаще всего используется показательный закон распределения времени обслуживания: 
 
где m =1/tобс - интенсивность обслуживания (среднее число обслуживаний в единицу времени), tобс - среднее время обслуживания одной заявки.




68. Информационные технологии в науке и образовании.
Рассказать про то, что в науке, как и в образовании уже не обойтись без компьютера. Повышает эффективность, скорость изучения

В учебном процессе высшего учебного заведения изучение ИТ предусматривает решение задач нескольких уровней:
* Использование информационных технологий как инструмента образования, познания, что осуществляется в курсе Информатика;
* Информационные технологии в профессиональной деятельности, на что направлена общепрофессиональная дисциплина Информационные технологии, рассматривающая их теорию, компоненты, методику;
* Обучение прикладным информационным технологиям, ориентированным на специальность, предназначенным для организации и управления конкретной профессиональной деятельностью, что изучается в дисциплинах специализаций.


Например, дисциплина Информационные технологии в экономике и синонимичная ей Информационные технологии в управлении входит в образовательную программу обучения студентов экономических специальностей. Современный экономист должен уметь принимать обоснованные решения на основе информационных потоков, кроме традиционных экономических знаний студент должен быть знаком с процессом обработки данных и владеть навыками построения информационных систем. 

69. Прикладное программное обеспечение сетевых технологий (Сетевые операционные системы. Сетевые пакеты прикладных программ).
Сетевая операционная система - операционная система со встроенными возможностями для работы в компьютерных сетях. К таким возможностям можно отнести:
* поддержку сетевого оборудования
* поддержку сетевых протоколов
* поддержку протоколов маршрутизации
* поддержку фильтрации сетевого трафика
* поддержку доступа к удалённым ресурсам, таким как принтеры, диски и т. п. по сети
* поддержку сетевых протоколов авторизации
* наличие в системе сетевых служб позволяющих удалённым пользователям использовать ресурсы компьютера


Примеры сетевых операционных систем:
* Microsoft Windows Server
* Различные UNIX системы, такие как Solaris, FreeBSD
* Различные GNU/Linux системы


Главными задачами являются разделение ресурсов сети (например, дисковые пространства) и администрирование сети. С помощью сетевых функций системный администратор определяет разделяемые ресурсы, задаёт пароли, определяет права доступа для каждого пользователя или группы пользователей. Отсюда деление:
* сетевые ОС для серверов;
* сетевые ОС для пользователей.


70. Принципы построения распределенных информационных систем. Промежуточное программное обеспечениё для обработки сообщений.
Распределённая система - система, для которой отношения местоположений элементов (или групп элементов) играют существенную роль с точки зрения функционирования системы, а, следовательно, и с точки зрения анализа и синтеза системы.
Основная задача, которую пытаются решить с помощью распределенных систем - обеспечение максимально простого доступа к возможно большему количеству ресурсов как можно большему числу пользователей.
Наиболее важными свойствами такой системы являются прозрачность, открытость, масштабируемость и безопасность.


Прозрачностью называется способность системы скрыть от пользователя физическое распределение ресурсов, а также аспекты их перераспределения и перемещения между различными машинами в ходе работы.
Открытость системы определяется как полнота и ясность описания интерфейсов работы с ней и служб, которые она предоставляет через эти интерфейсы. 
Масштабируемость системы - это зависимость изменения ее характеристик от количества ее пользователей и подключенных ресурсов, а также от степени географической распределенности системы. В число значимых характеристик при этом попадают функциональность, производительность, стоимость и т.д.
Безопасность. Так как распределенные системы вовлекают в свою работу множество пользователей, машин и географически разделенных элементов, вопросы их безопасности получают гораздо большее значение, чем при работе обычных приложений, сосредоточенных на одной физической машине. 


Промежуточное ПО: фреймворки J2EE и .NET и остальные Enterprise решения.

71. Сервисно-ориентированная архитектура распределенных приложений. Основные протоколы.
Сервисно-ориентированная архитектура - это парадигма организации и использования распределенных информационных ресурсов таких как: приложения и данные, находящихся в сфере ответственности разных владельцев, для достижения желаемых результатов потребителем, которым может быть: конечный пользователь или другое приложение.
Пример сервиса: Получение прогноза погоды через Интернет.


В основе SOA лежат принципы многократного использования функциональных элементов ИТ, ликвидации дублирования функциональности в ПО, унификации типовых операционных процессов, обеспечения перевода операционной модели компании на централизованные процессы и функциональную организацию на основе промышленной платформы интеграции.
Компоненты программы могут быть распределены по разным узлам сети, и предлагаются как независимые, слабо связанные, заменяемые сервисы-приложения. 


Основными целями применения SOA для крупных информационных систем, уровня предприятия, и выше являются:
* сокращение издержек при разработке приложений, за счет упорядочивания процесса разработки; 
* расширение повторного использования кода; 
* независимость от используемых платформ, инструментов, языков разработки; 
* повышение масштабируемости создаваемых систем;


Принципы SOA: 
* архитектура, как таковая, не привязана к какой-то определенной технологии; 
* независимость организации системы от используемой вычислительной платформы (платформ); 
* независимость организации системы от применяемых языков программирования; 
* использование сервисов, независимых от конкретных приложений, с единообразными интерфейсами доступа к ним; 
* организация сервисов как слабосвязанных компонентов для построения систем.

72. Корпоративные информационные системы (класс ERP). Разновидности. Решаемые задачи.
ERP (Enterprise Resource Planning, Управление Ресурсами Предприятия) - информационная система, комплексное решение которой направлено на автоматизацию всех бизнес-процессов предприятия: планирования, учета, анализа, управления ресурсами (материальными ресурсами, денежными средствами, производственными мощностями, персоналом).


В ERP-системах реализованы следующие основные функциональные блоки:
* Планирование продаж и производства
* Управление спросом. Данный блок предназначен для прогноза будущего спроса на продукцию, определения объема заказов
* Планирование мощностей - составляются планы производства
* Составление основного плана производства (план выпуска продукции).
* Планирование потребностей в материалах
* Спецификация изделий. Определяет состав конечного изделия, материальные ресурсы
* Планирование потребностей в мощностях
* Управление закупками, запасами, продажами
* Управление финансами
* Управление проектами/программами


Наиболее распространенные в России системы класса ERP:
* SAP R/3, Oracle Applications, Baan,Галактика,Парус,1С: Предприятие 8.

73. Новые информационно-коммуникационные технологии как база становления информационного общества.
Информационное общество - общество, в котором большинство работающих занято производством, хранением, переработкой и реализацией информации, особенно высшей её формы - знаний. Для этой стадии развития общества и экономики характерно:
* увеличение роли информации, знаний и информационных технологий в жизни общества;
* возрастание числа людей, занятых информационными технологиями, коммуникациями и производством информационных продуктов и услуг, рост их доли в валовом внутреннем продукте;
* нарастающая информатизация общества с использованием телефонии, радио, телевидения, сети Интернет, а также традиционных и электронных СМИ;
* создание глобального информационного пространства, обеспечивающего:
* эффективное информационное взаимодействие людей;
* их доступ к мировым информационным ресурсам;
* удовлетворение их потребностей в информационных продуктах и услугах.
* развитие электронной демократии, информационной экономики, электронного государства, электронного правительства, цифровых рынков, электронных социальных и хозяйствующих сетей.


У. Мартин предпринял попытку выделить и сформулировать основные характеристики информационного общества по следующим критериям.
Технологический: ключевой фактор - информационные технологии, которые широко применяются в производстве, учреждениях, системе образования и в быту.
Социальный: информация выступает в качестве важного стимулятора изменения качества жизни, формируется и утверждается информационное сознание при широком доступе к информации.
Экономический: информация составляет ключевой фактор в экономике в качестве ресурса, услуг, товара, источника добавленной стоимости и занятости.
Политический: свобода информации, ведущая к политическому процессу, который характеризуется растущим участием и консенсусом между различными классами и социальными слоями населения.
Культурный: признание культурной ценности информации посредством содействия утверждению информационных ценностей в интересах развития отдельного индивида и общества в целом.

74. Модели жизненного цикла программного обеспечения.
Жизненный цикл - это модель процесса создания и использования АСОИУ, отражающая ее различные состояния, начиная с момента возникновения необходимости в данной системе и заканчивая моментом ее полного вывода из эксплуатации у всех пользователей или полным замещением новой системой.
Каскадная модель предполагает последовательную однократную реализацию этапов проектирования АСОИУ с переходом на следующий этап после полного окончания работ по предыдущему этапу.  
 
 Инкрементная модель. Когда постоянно возникает потребность в возврате к предыдущим этапам, уточнении или пересмотре ранее принятых решений. В этом случае процесс создания АСОИУ принимает итерационный вид с циклами обратной связи между этапами. Такой тип жизненного цикла иногда называют запланированным усовершенствованием системы.


 
 Эволюционная модель (или спиральная) не требует сразу детального формулирования всех требований к системе. Она позволяет начать проектирование, руководствуясь лишь предварительным набором основных требований.


75. Основные принципы структурного анализа систем.
В качестве двух базовых принципов используются следующие: принцип "разделяй и властвуй" и принцип иерархического упорядочивания. Первый является принципом решения трудных проблем путем разбиения их на множество меньших независимых задач, легких для понимания и решения. Второй принцип в дополнение к тому, что легче понимать проблему если она разбита на части, декларирует, что устройство этих частей также существенно для понимания.


Выделение двух базовых принципов инженерии программного обеспечения вовсе не означает, что остальные принципы являются второстепенными, игнорирование любого из них может привести к непредсказуемым последствиям (в том числе и к неуспеху всего проекта). Отметим основные из таких принципов:
Принцип абстрагирования - заключается в выделении существенных с некоторых позиций аспектов системы и отвлечение от несущественных с целью представления проблемы в простом общем виде.
Принцип формализации - заключается в необходимости строгого методического подхода к решению проблемы.
Принцип концептуальной общности - заключается в следовании единой философии на всех этапах ЖЦ (структурный анализ - структурное проектирование - структурное программирование - структурное тестирование).
Принцип полноты - заключается в контроле на присутствие лишних элементов.
Принцип непротиворечивости - заключается в обоснованности и согласованности элементов.
Принцип логической независимости - заключается в концентрации внимания на логическом проектировании для обеспечения независимости от физического проектирования.
Принцип независимости данных - заключается в том, что модели данных должны быть проанализированы и спроектированы независимо от процессов их логической обработки, а также от их физической структуры и распределения.
Принцип структурирования данных - заключается в том, что данные должны быть структурированы и иерархически организованы.
Принцип доступа конечного пользователя - заключается в том, что пользователь должен иметь средства доступа к базе данных, которые он может использовать непосредственно (без программирования).

76. Консалтинг в области информационных технологий.
Любое комплексное внедрение корпоративной системы управления требует ряда работ, непосредственно влияющих на требования к информационной системе и ее месту в общей системе управления предприятием. И именно эти работы относятся к IT консалтингу.
ИТ-консалтинг дает:
- возможность определить области и пути применения ИТ технологий и информационных систем в компании, определить ресурсы необходимые для развития ИТ и организовать эффективное управление этими ресурсами;
- снижение рисков ИТ-проектов и соответственно инвестиционных рисков;
- улучшение управления ИТ и качества предоставляемых ИТ-услуг;
-сокращение расходов за счет применения более современных технологий и эффективного использования уже имеющихся ИТ-ресурсов;
        Служба ИТ становится стратегическим ресурсом бизнеса. Это означает, что ИТ подразделение готово участвовать в улучшении операционной деятельности компании, бизнес готов дать полномочия ИТ для этих целей. Основные виды работ в области IT консалтинга:
- диагностика существующей системы информационного обеспечения предприятия, ее соответствия целям компании и разработка ИТ стратегии;
- диагностика организационной структуры и бизнес- процессов ИТ службы, оценка степени их соответствия текущим и планируемым в будущем задачам;
- обеспечение деятельности предприятия и разработка рекомендаций по их совершенствованию;
- анализ устойчивости, надежности и производительности информационной системы, выдача рекомендация по ее совершенствованию по заданным параметрам;
- разработка и внедрение системы управления ИТ сервисами.
 
77. Методика проведения обследования объектов автоматизации.
Целью обследования объекта автоматизации является построение формальной модели объекта автоматизации и формирование детальных требований к АСОИУ
Методики обследования предприятия
·            Изучение документации.
Может  быть необходимо для понимания того, как возникла потребность в базе данных, и получения информации о тех задачах предприятия, которые связаны с решаемой проблемой. Изучая документы, формы, отчеты и файлы, связанные с существующей системой, можно быстро приобрести определенные знания о системе.
·            Проведение собеседований.
Собеседование -обычно наиболее полезная методика сбора фактов. С помощью интервью можно получить информацию непосредственно от отдельных сотрудников предприятия, может быть поставлено несколько целей, таких как выяснение, проверка и толкование фактов, формирование заинтересованности, привлечение конечного пользователя к работе, определение требований и сбор предложений и мнений.
·            Наблюдение за работой предприятия.
Используя данную методику для изучения системы, можно принимать участие в работе или наблюдать, как ее выполняют другие. Эта методика особенно полезна, когда правильность данных, собранных с использованием других методик, находится под вопросом или когда сложность некоторых аспектов системы мешает конечному пользователю точно объяснить суть проблемы.
·            Проведение исследований.
Исследование работы приложения и самой проблемы. Компьютерные отраслевые журналы, справочники и Internet являются хорошими источниками информации. Они могут предоставить информацию о том, как другие решают подобные проблемы, а также существуют ли пакеты программного обеспечения для полного или хотя бы частичного решения проблемы.
·            Проведение анкетирования.
 
78. Методы построения и анализа моделей деятельности предприятия.Построение и анализ моделей деятельности предприятия относится к области бизнес-консалтинга, включающего в себя построение моделей текущего и целевого состояния предприятия, выработку предложений по совершенствованию его деятельности, формирование целевой программы развития предприятия и плана перехода из текущего состояния в целевое. На данном этапе осуществляется обработка результатов обследования и построение функциональных, информационных и, по необходимости, событийных моделей технологий работы предприятия следующих двух видов.
Модель как есть - модель деятельности предприятия, представляющая собой снимок положения дел на предприятии на момент обследования. Эта модель включает оргштатную структуру, взаимодействия подразделений, принятые технологии, автоматизированные и неавтоматизированные бизнес-процессы и т.д. Она позволяет понять, что делает и как функционирует данное предприятие с позиций системного анализа, а также, на основе автоматической верификации, выявить ряд ошибок и узких мест и сформулировать ряд предложений по улучшению ситуации;
Модель как должно быть - модель будущей деятельности предприятия, интегрирующая перспективные предложения руководства и сотрудников предприятия, экспертов и системных аналитиков по совершенствованию деятельности предприятия.
 Мягкий реинжиниринг - совершенствование технологий на основе оценки их эффективности. При этом критериями оценки являются стоимостные и временные затраты выполнения бизнес-процессов, дублирование и противоречивость выполнения отдельных задач бизнес-процесса, степень загруженности сотрудников.
Жесткий реинжиниринг - радикальное изменение технологий и переосмысление бизнес-процессов. Например, банку, как организации, работу которой нужно реорганизовать,  вместо попыток улучшения бизнес-процесса проверки кредитоспособности клиентов, может быть, следует задуматься, а нужна ли вообще такая проверка? Возможно затраты на такие проверки во много раз превышают убытки, которые может понести банк в отдельных случаях некредитоспособности клиента (в случае, когда клиентов много, а суммы сделок незначительны)! Необходимость подобного перехода, собственно, и повлекла за собой создание подходов к реорганизации деятельности предприятий.
По результатам анализа и моделирования осуществляется оценка эффективности деятельности структурных подразделении предприятия, на основе которой формируются предложения по совершенствованию его структуры, технологий работы структурных подразделений и предприятия в целом.
Ниже перечислены основные виды и последовательность работ, рекомендуемые при построении моделей деятельности.1) Разработка функциональной модели деятельности предприятия 2) Разработка модели потоков данных предприятия 3) Разработка информационной модели предприятия 4) Разработка событийной модели предприятия
Следует отметить, что построенные модели деятельности являются не просто промежуточным результатом, используемым консультантом для выработки каких-либо рекомендаций и заключений. Они представляют собой самостоятельный результат, имеющий большое практическое значение.
 
79. Структурно-функциональные модели (SADT).
Функциональная модель предназначена для изучения особенностей работы (функционирования) системы и её назначения во взаимосвязи с внутренними и внешними элементами.
Функция - самая существенная характеристика любой системы, отражает её предназначение, то, ради чего она была создана. Подобные модели оперируют, прежде всего, с функциональными параметрами. Графическим представлением этих моделей служат блок-схемы. Они отображают порядок действий, направленных на достижение заданных целей (т. н. функциональная схема). Функциональной моделью является абстрактная модель.
Структурная модель
Так, под структурной моделью устройства могут подразумевать: структурную схему, которая представляет собой упрощенное графическое изображение устройства, дающее общее представление о форме, расположении и числе наиболее важных его частей и их взаимных связях; топологическую модель, которая отражает взаимные связи между объектами, не зависящие от их геометрических свойств.
Под структурной моделью процесса обычно подразумевают характеризующую его последовательность и состав стадий и этапов работы, совокупность процедур и привлекаемых технических средств, взаимодействие участников процесса.
Состояние прототипа - это совокупность свойств его составных частей, а также его собственных. Состояние - моментальная фотография прототипа для выбранного момента времени. С течением времени состояние может изменяться - тогда говорят о существовании процесса. В соответствии со сказанным возможно построение модели состояния и модели процессов. Модели первого типа называются структурными моделями, второго типа - функциональными моделями. Примерами структурных моделей являются чертеж какого-либо устройства, схема компьютера, блок-схема алгоритма и пр. Примерами функциональных моделей являются макет, демонстрирующий работу чего-либо; протез. Важнейшим классом функциональных моделей являются модели имитационные.
По характеру отображаемых свойств объекта ММ делятся на структурные и функциональные.
Структурные ММ предназначены для отображения структурных свойств объекта. В свою очередь, структурные ММ делятся на топологические и геометрические.
Описание математических соотношений на уровнях структурных, логических и количественных свойств принимает конкретные формы в условиях определенного объекта.
Функциональные ММ предназначены для отображения физических или информационных процессов, протекающих в технологических системах при их функционировании.
Обычно функциональные ММ представляются системой уравнений, описывающих фазовые переменные, внутренние, внешние и выходные параметры.

80. Модели потоков данных (DFD).
DFD - общепринятое сокращение от англ. Data Flow Diagrams - диаграммы потоков данных. Так называетсяметодология графического структурного анализа, описывающая внешние по отношению к системе источники и адресаты данных, логические функции, потоки данных и хранилища данных, к которым осуществляется доступ. Диаграмма потоков данных (data flow diagram, DFD) - один из основных инструментов структурного анализа и проектирования информационных систем, существовавших до широкого распространения UML.
Информационная система принимает извне потоки данных. Для обозначения элементов среды функционирования системы используется понятие внешней сущности. Внутри системы существуют процессы преобразования информации, порождающие новые потоки данных. Потоки данных могут поступать на вход к другим процессам, помещаться (и извлекаться) в накопители данных, передаваться к внешним сущностям.  
Модель DFD, как и большинство других структурных моделей - иерархическая модель. Каждый процесс может быть подвергнут декомпозиции, то есть разбиению на структурные составляющие, отношения между которыми в той же нотации могут быть показаны на отдельной диаграмме. Когда достигнута требуемая глубина декомпозиции - процесс нижнего уровня сопровождается мини-спецификацией (текстовым описанием).
Кроме того, нотация DFD поддерживает понятие подсистемы - структурного компонента разрабатываемой системы.
Нотация DFD - удобное средство для формирования контекстной диаграммы, то есть диаграммы, показывающей разрабатываемую АИС в коммуникации с внешней средой. Это - диаграмма верхнего уровня в иерархии диаграмм DFD. Её назначение - ограничить рамки системы, определить, где заканчивается разрабатываемая система и начинается среда. Другие нотации, часто используемые при формировании контекстной диаграммы - диаграмма SADT, Диаграмма вариантов использования.
 
81. Модели сущность-связь (ERD).
Первым шагом при создании логической модели БД является построение диаграммы ERD(EntityRelationshipDiagram). ERD-диаграммы состоят из трех частей: сущностей, атрибутов и взаимосвязей. Сущностями являются существительные, атрибуты - прилагательными или модификаторами, взаимосвязи - глаголами.  
ERD-диаграмма позволяет рассмотреть систему целиком и выяснить требования, необходимые для ее разработки, касающиеся хранения информации. ERD-диаграммы можно подразделить на отдельные куски, соответствующие отдельным задачам, решаемым проектируемой системой. Это позволяет рассматривать систему с точки зрения функциональных возможностей, делая процесс проектирования управляемым.
ERD-диаграмма графически представляет структуру данных проектируемой информационной системы. Сущности отображаются при помощи прямоугольников, содержащих имя. Имена принято выражать существительными в единственном числе, взаимосвязи - при помощи линий, соединяющих отдельные сущности. Взаимосвязь показывает, что данные одной сущности ссылаются или связаны с данными другой.
Cущность - это набор (объединение) объектов, называемых экземплярами.

82. Нормализация модели данных.
Нормальная форма - свойство отношения в реляционной модели данных, характеризующее его с точки зрения избыточности, потенциально приводящей к логически ошибочным результатам выборки или изменения данных. Нормальная форма определяется как совокупность требований, которым должно удовлетворять отношение. Процесс преобразования отношений базы данных к виду, отвечающему нормальным формам, называется нормализацией. Нормализация предназначена для приведения структуры БД к виду, обеспечивающему минимальную логическую избыточность, и не имеет целью уменьшение или увеличение производительности работы или же уменьшение или увеличение физического объёма базы данных. Конечной целью нормализации является уменьшение потенциальной противоречивости хранимой в базе данных информации. Назначение процесса нормализации заключается в следующем: исключение некоторых типов избыточности; устранение некоторых аномалий обновления; разработка проекта базы данных, который является достаточно качественным представлением реального мира, интуитивно понятен и может служить хорошей основой для последующего расширения; упрощение процедуры применения необходимых ограничений целостности.
Первая нормальная форма (1NF) Переменная отношения находится в первой нормальной форме (1НФ) тогда и только тогда, когда в любом допустимом значении отношения каждый его кортеж содержит только одно значение для каждого из атрибутов. В реляционной модели отношение всегда находится в первой нормальной форме по определению понятия отношение. Что же касается различных таблиц, то они могут не быть правильными представлениями отношений и, соответственно, могут не находиться в 1НФ.
Вторая нормальная форма (2NF) Переменная отношения находится во второй нормальной форме тогда и только тогда, когда она находится в первой нормальной форме и каждый неключевой атрибут неприводимо (функционально полно) зависит от её потенциального ключа.
Третья нормальная форма (3NF) Переменная отношения находится в третьей нормальной форме тогда и только тогда, когда она находится во второй нормальной форме, и отсутствуют транзитивные функциональные зависимости неключевых атрибутов от ключевых.

83. Объектно-ориентированный язык визуального моделирования UML.
UML (UnifiedModelingLanguage - унифицированный язык моделирования) - язык графического описания для объектного моделирования в области разработки программного обеспечения. UML является языком широкого профиля, это - открытый стандарт, использующий графические обозначения для создания абстрактной модели системы, называемой UML-моделью. UML был создан для определения, визуализации, проектирования и документирования, в основном, программных систем. UML не является языком программирования, но на основании UML-моделей возможна генерация кода. Использование UML  используется для моделирования ПО, бизнес-процессов, системного проектирования и отображения организационных структур.  
Преимущества UML: UML объектно-ориентирован, в результате чего методы описания результатов анализа и проектирования семантически близки к методам программирования на современных объектно-ориентированных языках; UML позволяет описать систему практически со всех возможных точек зрения и разные аспекты поведения системы; Диаграммы UML сравнительно просты для чтения после достаточно быстрого ознакомления с его синтаксисом; UML расширяет и позволяет вводить собственные текстовые и графические стереотипы, что способствует его применению не только в сфере программной инженерии; UML получил широкое распространение и динамично развивается.
Критика: Избыточность языка, Неточная семантика, Проблемы при изучении и внедрении, Только код отражает код, Кумулятивная нагрузка/Рассогласование нагрузки (неспособности входа одной системы воспринять выход другой) Пытается быть всем для всех. UML

84. Методология RUP: назначение и основные характеристики.
RUP - методология  разработки программного обеспечения, созданная компанией Rational Software. Ведущая методология, в которой инструментально поддерживаются все этапы жизненного цикла разработки ПО.
RUP обеспечивает прозрачность и управляемость процесса и позволяет создавать ПО в соответствии с требованиями заказчика на момент сдачи ПО, а также в соответствии с возможностями инструментальных средств поддержки разработки. В основе методологии RUP лежит "пошаговый подход". Он определяет этапы жизненного цикла, контрольные точки, правила работ для каждого этапа и, тем самым, упорядочивает проектирование и разработку ПО. Для каждого этапа жизненного цикла методология задает: состав и последовательность работ, а также правила их выполнения; распределение полномочий среди участников проекта (роли); состав и шаблоны формируемых промежуточных и итоговых документов; порядок контроля и проверки качества.
RUP определяет следующие основные процессы: моделирование бизнес-процессов;  управление требованиями; анализ и проектирование; реализация; тестирование; развертывание; конфигурационное управление и управление изменениями; управление проектом; управление средой.

85. Диаграммы вариантов использования (use-cases diagram).
Диаграмма прецедентов (диаграмма вариантов использования) в UML - диаграмма, отражающая отношения между актёрами и прецедентами и являющаяся составной частью модели прецедентов, позволяющей описать систему на концептуальном уровне.   
Для отражения модели прецедентов на диаграмме используются: рамки системы (англ. system boundary) - прямоугольник с названием в верхней части и эллипсами (прецедентами) внутри. Часто может быть опущен без потери полезной информации,
актёр (англ. actor) - стилизованный человечек, обозначающий набор ролей пользователя (понимается в широком смысле: человек, внешняя сущность, класс, другая система), взаимодействующего с некоторой сущностью (системой, подсистемой, классом). Актёры не могут быть связаны друг с другом (за исключением отношений обобщения/наследования),
прецедент - эллипс с надписью, обозначающий выполняемые системой действия, приводящие к наблюдаемым актёрами результатам. Надпись может быть именем или описанием (с точки зрения актёров) того, что делает система. Имя прецедента связано с непрерываемым (атомарным) сценарием - конкретной последовательностью действий, иллюстрирующей поведение. В ходе сценария актёры обмениваются с системой сообщениями. Сценарий может быть приведён на диаграмме прецедентов в виде UML-комментария. С одним прецедентом может быть связано несколько различных сценариев.
Отношения между прецедентами:
обобщение прецедента - стрелка с незакрашенным треугольником (треугольник ставится у более общего прецедента), включение прецедента - пунктирная стрелка со стереотипом include, расширение прецедента - пунктирная стрелка со стереотипом extend (стрелка входит в расширяемый прецедент, в дополнительном разделе которого может быть указана точка расширения и, возможно в виде комментария, условие расширения).

86. Диаграммы классов (class diagram). Основные объекты диаграммы.
Диаграмма классов (англ. StaticStructurediagram) - диаграмма, демонстрирующая классы системы, их атрибуты, методы и взаимосвязи между ними. Входит в UML.
Существует два вида:
* Статический вид диаграммы рассматривает логические взаимосвязи классов между собой;
* Аналитический вид диаграммы рассматривает общий вид и взаимосвязи классов входящих в систему.
Взаимосвязи - это особый тип логических отношений между сущностями, показанных на диаграммах классов и объектов. В UMLе представлены следующие виды отношений:
Ассоциации (показывает, что объекты одной сущности (класса) связаны с объектами другой сущности.
Если между двумя классами определена ассоциация, то можно перемещаться от объектов одного класса к объектам другого. Графически ассоциация изображается в виде линии, соединяющей класс сам с собой или с другими классами). Кратность можно задать: (1), (0..1), (0..*),  (1..*).
Агрегация -  это разновидность ассоциации при отношении между целым и его частями. Как тип ассоциации агрегация может быть именованной. Одно отношение агрегации не может включать более двух классов.  
Композиция - более строгий вариант агрегации. Композиция имеет жёсткую зависимость времени существования экземпляров класса контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено. Графически представляется как и агрегация, но с закрашенным ромбиком.  
Обобщение (наследование) (Generalization) показывает, что один из двух связанных классов (подтип) является частной формой другого (надтипа), который называется обобщением первого. На практике это означает, что любой экземпляр подтипа является также экземпляром надтипа. Графически обобщение представляется линией с пустым треугольником у супертипа.
Реализация - отношение между двумя элементами модели, в котором один элемент (клиент) реализует поведение, заданное другим (поставщиком). Реализация - отношение целое-часть. Графически реализация представляется так же, как и наследование, но с пунктирной линией.
Зависимость (dependency) - это слабая форма отношения использования, при котором изменение в спецификации одного влечёт за собой изменение другого, причём обратное не обязательно. Возникает когда объект выступает, например, в форме параметра или локальной переменной. Графически представляется штриховой стрелкой, идущей от зависимого элемента к тому, от которого он зависит.

87. Диаграммы деятельности (activity diagram). Основные объекты диаграммы.
Диаграмма деятельности - UML-диаграмма , на которой показано разложение некоторой деятельности на её составные части. Под деятельностью понимается спецификация исполняемого поведения в виде координированного последовательного и параллельного выполнения подчинённых элементов - вложенных видов деятельности и отдельных действий, соединённых между собой потоками, которые идут от выходов одного узла ко входам другого.
Диаграммы деятельности используются при моделировании бизнес-процессов, технологических процессов, последовательных и параллельных вычислений.
Диаграммы деятельности состоят из ограниченного количества фигур, соединённых стрелками. Основные фигуры:
* Прямоугольники с закруглениями - действия
* Ромбы - решения  
* Широкие полосы - начало (разветвление) и окончание (схождение) ветвления действий
* Чёрный круг - начало процесса (начальное состояние)
* Чёрный круг с обводкой - окончание процесса (конечное состояние)
* Стрелки идут от начала к концу процесса и показывают последовательность переходов.

88. Диаграммы последовательности (sequence diagramm).
Диаграмма состояний -  диаграмма, на которой для некоторого набора объектов на единой временной оси показан жизненный цикл (создание-деятельность-уничтожение) и взаимодействие (отправка запросов и получение ответов). Используется в языке UML.
